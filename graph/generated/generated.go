// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/engajerest/sparkle/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Cat struct {
		Categoryid   func(childComplexity int) int
		Categoryname func(childComplexity int) int
		Categorytype func(childComplexity int) int
		Sortorder    func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	Category struct {
		Categoryid func(childComplexity int) int
		Name       func(childComplexity int) int
		SortOrder  func(childComplexity int) int
		Status     func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	Custinfo struct {
		Address    func(childComplexity int) int
		Contact    func(childComplexity int) int
		Customerid func(childComplexity int) int
		Email      func(childComplexity int) int
		Firstname  func(childComplexity int) int
		Lastname   func(childComplexity int) int
	}

	LocationInfo struct {
		Createdby    func(childComplexity int) int
		LocationName func(childComplexity int) int
		Locationid   func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	Module struct {
		CategoryID func(childComplexity int) int
		Content    func(childComplexity int) int
		ImageURL   func(childComplexity int) int
		LogoURL    func(childComplexity int) int
		ModuleID   func(childComplexity int) int
		Name       func(childComplexity int) int
	}

	Mutation struct {
		Createcharges        func(childComplexity int, input *model.Chargecreate) int
		Createlocation       func(childComplexity int, input *model.Location) int
		Createpromotion      func(childComplexity int, input *model.Promoinput) int
		Createtenantuser     func(childComplexity int, create *model.Tenantuser) int
		Initialupdate        func(childComplexity int, input *model.Updateinfo) int
		Insertsubcategory    func(childComplexity int, input []*model.Subcatinsertdata) int
		Subscribe            func(childComplexity int, input model.Data) int
		Subscribemore        func(childComplexity int, input []*model.Subscribemoreinput) int
		Subscription         func(childComplexity int, input []*model.Subscriptionnew) int
		Updatecharges        func(childComplexity int, input *model.Chargeupdate) int
		Updatelocation       func(childComplexity int, input *model.Locationupdate) int
		Updatelocationstatus func(childComplexity int, input *model.Locationstatusinput) int
		Updatetenantbusiness func(childComplexity int, businessinfo *model.Business) int
		Updatetenantuser     func(childComplexity int, update *model.Updatetenant) int
	}

	Package struct {
		ModuleID         func(childComplexity int) int
		Modulename       func(childComplexity int) int
		Name             func(childComplexity int) int
		PackageAmount    func(childComplexity int) int
		PackageContent   func(childComplexity int) int
		PackageID        func(childComplexity int) int
		PackageIcon      func(childComplexity int) int
		Packageexpiry    func(childComplexity int) int
		PaymentMode      func(childComplexity int) int
		Promocodeid      func(childComplexity int) int
		Promodescription func(childComplexity int) int
		Promonname       func(childComplexity int) int
		Promotype        func(childComplexity int) int
		Promovalue       func(childComplexity int) int
		Status           func(childComplexity int) int
		Validity         func(childComplexity int) int
		Validitydate     func(childComplexity int) int
	}

	Promotion struct {
		Broadstatus     func(childComplexity int) int
		Enddate         func(childComplexity int) int
		Failure         func(childComplexity int) int
		Promocode       func(childComplexity int) int
		Promotag        func(childComplexity int) int
		Promoterms      func(childComplexity int) int
		PromotionID     func(childComplexity int) int
		Promotionname   func(childComplexity int) int
		Promotiontypeid func(childComplexity int) int
		Promotype       func(childComplexity int) int
		Promovalue      func(childComplexity int) int
		Startdate       func(childComplexity int) int
		Status          func(childComplexity int) int
		Success         func(childComplexity int) int
		Tenantame       func(childComplexity int) int
		Tenantid        func(childComplexity int) int
	}

	Query struct {
		GetBusiness              func(childComplexity int, tenantid int, categoryid int) int
		Getallmodule             func(childComplexity int, categoryid int, tenantid int, mode bool) int
		Getallpromos             func(childComplexity int, moduleid int) int
		Getchargetypes           func(childComplexity int) int
		Getlocationbyid          func(childComplexity int, tenantid int, locationid int) int
		Getnonsubscribed         func(childComplexity int, tenantid int) int
		Getnonsubscribedcategory func(childComplexity int, tenantid int) int
		Getpayments              func(childComplexity int, tenantid int, typeid int) int
		Getpromotions            func(childComplexity int, tenantid int) int
		Getpromotypes            func(childComplexity int) int
		Getsubcategorybyid       func(childComplexity int, categoryid int) int
		Getsubscriptions         func(childComplexity int, tenantid int) int
		Gettenantinfo            func(childComplexity int, tenantid int) int
		Gettenantsubcategory     func(childComplexity int, tenantid int, categoryid int, moduleid int) int
		Location                 func(childComplexity int, tenantid int) int
		Sparkle                  func(childComplexity int) int
		Tenantusers              func(childComplexity int, tenantid int, userid int) int
	}

	Sparkle struct {
		Category    func(childComplexity int) int
		Package     func(childComplexity int) int
		Subcategory func(childComplexity int) int
	}

	SubCategory struct {
		CategoryID    func(childComplexity int) int
		Icon          func(childComplexity int) int
		Name          func(childComplexity int) int
		SortOrder     func(childComplexity int) int
		Status        func(childComplexity int) int
		SubCategoryID func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	TenantData struct {
		Categoryid     func(childComplexity int) int
		Featureid      func(childComplexity int) int
		Locationid     func(childComplexity int) int
		Locationname   func(childComplexity int) int
		Moduleid       func(childComplexity int) int
		Modulename     func(childComplexity int) int
		Subcategoryid  func(childComplexity int) int
		Subscriptionid func(childComplexity int) int
		Taxamount      func(childComplexity int) int
		Tenantaccid    func(childComplexity int) int
		Tenantid       func(childComplexity int) int
		Tenantname     func(childComplexity int) int
		Totalamount    func(childComplexity int) int
	}

	Tenantschema struct {
		About       func(childComplexity int) int
		Address     func(childComplexity int) int
		Brandname   func(childComplexity int) int
		Cod         func(childComplexity int) int
		Digital     func(childComplexity int) int
		Email       func(childComplexity int) int
		Moduleid    func(childComplexity int) int
		Modulename  func(childComplexity int) int
		Phone       func(childComplexity int) int
		Tenantaccid func(childComplexity int) int
		Tenantid    func(childComplexity int) int
		Tenantimage func(childComplexity int) int
		Tenanttoken func(childComplexity int) int
	}

	Businessdata struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
		Updated func(childComplexity int) int
	}

	Chargetype struct {
		Chargeid   func(childComplexity int) int
		Chargename func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	Chargetypedata struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
		Types   func(childComplexity int) int
	}

	Deliverycharge struct {
		Locationid func(childComplexity int) int
		Settingsid func(childComplexity int) int
		Slab       func(childComplexity int) int
		Slabcharge func(childComplexity int) int
		Slablimit  func(childComplexity int) int
		Slabtype   func(childComplexity int) int
		Tenantid   func(childComplexity int) int
	}

	GetBusinessdata struct {
		Businessinfo func(childComplexity int) int
		Code         func(childComplexity int) int
		Message      func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	Getalllocations struct {
		Code      func(childComplexity int) int
		Locations func(childComplexity int) int
		Message   func(childComplexity int) int
		Status    func(childComplexity int) int
	}

	Getallmoduledata struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Modules func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	Getallpromodata struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Promos  func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	Getnonsubscribedcategorydata struct {
		Category func(childComplexity int) int
		Code     func(childComplexity int) int
		Message  func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	Getnonsubscribeddata struct {
		Code          func(childComplexity int) int
		Message       func(childComplexity int) int
		Nonsubscribed func(childComplexity int) int
		Status        func(childComplexity int) int
	}

	Getpaymentdata struct {
		Code     func(childComplexity int) int
		Message  func(childComplexity int) int
		Payments func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	Getpromotiondata struct {
		Code       func(childComplexity int) int
		Message    func(childComplexity int) int
		Promotions func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	Getsubcategorydata struct {
		Code          func(childComplexity int) int
		Message       func(childComplexity int) int
		Status        func(childComplexity int) int
		Subcategories func(childComplexity int) int
	}

	Getsubscriptionsdata struct {
		Code       func(childComplexity int) int
		Message    func(childComplexity int) int
		Status     func(childComplexity int) int
		Subscribed func(childComplexity int) int
	}

	Gettenantsubcategorydata struct {
		Code                func(childComplexity int) int
		Message             func(childComplexity int) int
		Status              func(childComplexity int) int
		Tenantsubcategories func(childComplexity int) int
	}

	Info struct {
		About          func(childComplexity int) int
		Address        func(childComplexity int) int
		Brandname      func(childComplexity int) int
		Cod            func(childComplexity int) int
		Countrycode    func(childComplexity int) int
		Currencycode   func(childComplexity int) int
		Currencysymbol func(childComplexity int) int
		Digital        func(childComplexity int) int
		Email          func(childComplexity int) int
		Moduleid       func(childComplexity int) int
		Modulename     func(childComplexity int) int
		Phone          func(childComplexity int) int
		Social         func(childComplexity int) int
		Tenantaccid    func(childComplexity int) int
		Tenantid       func(childComplexity int) int
		Tenantimage    func(childComplexity int) int
		Tenanttoken    func(childComplexity int) int
	}

	Locationbyiddata struct {
		Code         func(childComplexity int) int
		Locationdata func(childComplexity int) int
		Message      func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	Locationdata struct {
		Code         func(childComplexity int) int
		Locationinfo func(childComplexity int) int
		Message      func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	Locationgetall struct {
		Address         func(childComplexity int) int
		City            func(childComplexity int) int
		Closingtime     func(childComplexity int) int
		Contact         func(childComplexity int) int
		Countycode      func(childComplexity int) int
		Createdby       func(childComplexity int) int
		Delivery        func(childComplexity int) int
		Deliverycharges func(childComplexity int) int
		Deliverymins    func(childComplexity int) int
		Deliverytype    func(childComplexity int) int
		Email           func(childComplexity int) int
		Latitude        func(childComplexity int) int
		LocationName    func(childComplexity int) int
		Locationid      func(childComplexity int) int
		Longitude       func(childComplexity int) int
		Openingtime     func(childComplexity int) int
		Othercharges    func(childComplexity int) int
		Postcode        func(childComplexity int) int
		State           func(childComplexity int) int
		Status          func(childComplexity int) int
		Suburb          func(childComplexity int) int
		Tenantid        func(childComplexity int) int
		Tenantusers     func(childComplexity int) int
	}

	Mod struct {
		Amount          func(childComplexity int) int
		Baseprice       func(childComplexity int) int
		Categoryid      func(childComplexity int) int
		Content         func(childComplexity int) int
		Iconurl         func(childComplexity int) int
		Logourl         func(childComplexity int) int
		Moduleid        func(childComplexity int) int
		Modulename      func(childComplexity int) int
		Subcategoryid   func(childComplexity int) int
		Subcategoryname func(childComplexity int) int
		Taxamount       func(childComplexity int) int
		Taxpercent      func(childComplexity int) int
	}

	Othercharge struct {
		Chargeid       func(childComplexity int) int
		Chargename     func(childComplexity int) int
		Chargetype     func(childComplexity int) int
		Chargevalue    func(childComplexity int) int
		Locationid     func(childComplexity int) int
		Tenantchargeid func(childComplexity int) int
		Tenantid       func(childComplexity int) int
	}

	Paymentdata struct {
		Amount          func(childComplexity int) int
		Chargeid        func(childComplexity int) int
		Created         func(childComplexity int) int
		Customerid      func(childComplexity int) int
		Locationid      func(childComplexity int) int
		Moduleid        func(childComplexity int) int
		Orderid         func(childComplexity int) int
		Paymentdetails  func(childComplexity int) int
		Paymentid       func(childComplexity int) int
		Paymentref      func(childComplexity int) int
		Paymentstatus   func(childComplexity int) int
		Paymenttypeid   func(childComplexity int) int
		Refundamt       func(childComplexity int) int
		Tenantid        func(childComplexity int) int
		Transactiondate func(childComplexity int) int
	}

	Paymentdetaildata struct {
		Amount          func(childComplexity int) int
		Customerinfo    func(childComplexity int) int
		Locationid      func(childComplexity int) int
		Moduleid        func(childComplexity int) int
		Orderid         func(childComplexity int) int
		Payamount       func(childComplexity int) int
		Paymentdetailid func(childComplexity int) int
		Paymentid       func(childComplexity int) int
		Subscriptionid  func(childComplexity int) int
		Taxamount       func(childComplexity int) int
		Taxpercent      func(childComplexity int) int
		Tenantid        func(childComplexity int) int
	}

	Promo struct {
		Address          func(childComplexity int) int
		City             func(childComplexity int) int
		Companyname      func(childComplexity int) int
		Moduleid         func(childComplexity int) int
		Packageexpiry    func(childComplexity int) int
		Packageid        func(childComplexity int) int
		Partnerid        func(childComplexity int) int
		Postcode         func(childComplexity int) int
		Promocodeid      func(childComplexity int) int
		Promodescription func(childComplexity int) int
		Promoname        func(childComplexity int) int
		Promotype        func(childComplexity int) int
		Promovalue       func(childComplexity int) int
		Validity         func(childComplexity int) int
		Validitystatus   func(childComplexity int) int
	}

	Promotioncreateddata struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	Promotypesdata struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
		Types   func(childComplexity int) int
	}

	Result struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	Socialinfo struct {
		Dailcode      func(childComplexity int) int
		Socialicon    func(childComplexity int) int
		Socialid      func(childComplexity int) int
		Sociallink    func(childComplexity int) int
		Socialprofile func(childComplexity int) int
	}

	Staffdetail struct {
		Locationdetails func(childComplexity int) int
		Locationid      func(childComplexity int) int
		Staffdetailid   func(childComplexity int) int
		Tenanatstaffid  func(childComplexity int) int
		Tenantid        func(childComplexity int) int
	}

	Stafflocation struct {
		Address      func(childComplexity int) int
		City         func(childComplexity int) int
		Contact      func(childComplexity int) int
		Email        func(childComplexity int) int
		Locationid   func(childComplexity int) int
		Locationname func(childComplexity int) int
		Postcode     func(childComplexity int) int
	}

	Subcat struct {
		Categoryid      func(childComplexity int) int
		Icon            func(childComplexity int) int
		Status          func(childComplexity int) int
		Subcategoryid   func(childComplexity int) int
		Subcategoryname func(childComplexity int) int
	}

	SubscribedData struct {
		Code    func(childComplexity int) int
		Info    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	SubscribedDataResponse struct {
		Code    func(childComplexity int) int
		Info    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	Subscriptionsdata struct {
		Categoryid           func(childComplexity int) int
		Customercount        func(childComplexity int) int
		Featureid            func(childComplexity int) int
		Iconurl              func(childComplexity int) int
		Locationcount        func(childComplexity int) int
		LogoURL              func(childComplexity int) int
		Moduleid             func(childComplexity int) int
		Modulename           func(childComplexity int) int
		PackageAmount        func(childComplexity int) int
		PackageIcon          func(childComplexity int) int
		Packageid            func(childComplexity int) int
		Packagename          func(childComplexity int) int
		Paymentstatus        func(childComplexity int) int
		Subcategoryid        func(childComplexity int) int
		Subscriptionaccid    func(childComplexity int) int
		Subscriptionid       func(childComplexity int) int
		Subscriptionmethodid func(childComplexity int) int
		Taxamount            func(childComplexity int) int
		Tenantaccid          func(childComplexity int) int
		Tenantid             func(childComplexity int) int
		TotalAmount          func(childComplexity int) int
		Validity             func(childComplexity int) int
		Validitydate         func(childComplexity int) int
	}

	Tenantsubcat struct {
		Categoryid      func(childComplexity int) int
		Categoryname    func(childComplexity int) int
		Icon            func(childComplexity int) int
		Selected        func(childComplexity int) int
		Subcategoryid   func(childComplexity int) int
		Subcategoryname func(childComplexity int) int
	}

	Tenantupdatedata struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
		Updated func(childComplexity int) int
	}

	Tenantuserdata struct {
		Code       func(childComplexity int) int
		Message    func(childComplexity int) int
		Status     func(childComplexity int) int
		Tenantuser func(childComplexity int) int
	}

	Typedata struct {
		Promotiontypeid func(childComplexity int) int
		Tag             func(childComplexity int) int
		Typename        func(childComplexity int) int
	}

	User struct {
		Userid func(childComplexity int) int
	}

	Userfromtenant struct {
		Contact      func(childComplexity int) int
		Email        func(childComplexity int) int
		Firstname    func(childComplexity int) int
		Lastname     func(childComplexity int) int
		Locationid   func(childComplexity int) int
		Locationname func(childComplexity int) int
		Profileimage func(childComplexity int) int
		Tenantid     func(childComplexity int) int
		Userid       func(childComplexity int) int
	}

	Userinfodata struct {
		Contact      func(childComplexity int) int
		Email        func(childComplexity int) int
		Firstname    func(childComplexity int) int
		Lastname     func(childComplexity int) int
		Locationid   func(childComplexity int) int
		Profileid    func(childComplexity int) int
		Profileimage func(childComplexity int) int
		Userid       func(childComplexity int) int
	}

	Userlist struct {
		Moduleid      func(childComplexity int) int
		Tenantid      func(childComplexity int) int
		Tenantstaffid func(childComplexity int) int
		Userid        func(childComplexity int) int
		Userinfo      func(childComplexity int) int
	}

	Usersdata struct {
		Code    func(childComplexity int) int
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
		Users   func(childComplexity int) int
	}

	Usertenant struct {
		Locationid     func(childComplexity int) int
		Staffdetailid  func(childComplexity int) int
		Tenanatstaffid func(childComplexity int) int
		Tenantid       func(childComplexity int) int
		Tenantusers    func(childComplexity int) int
	}
}

type MutationResolver interface {
	Subscribe(ctx context.Context, input model.Data) (*model.SubscribedData, error)
	Createtenantuser(ctx context.Context, create *model.Tenantuser) (*model.Tenantuserdata, error)
	Updatetenantuser(ctx context.Context, update *model.Updatetenant) (*model.Tenantupdatedata, error)
	Updatetenantbusiness(ctx context.Context, businessinfo *model.Business) (*model.Businessdata, error)
	Createlocation(ctx context.Context, input *model.Location) (*model.Locationdata, error)
	Createpromotion(ctx context.Context, input *model.Promoinput) (*model.Promotioncreateddata, error)
	Createcharges(ctx context.Context, input *model.Chargecreate) (*model.Promotioncreateddata, error)
	Updatecharges(ctx context.Context, input *model.Chargeupdate) (*model.Promotioncreateddata, error)
	Updatelocationstatus(ctx context.Context, input *model.Locationstatusinput) (*model.Promotioncreateddata, error)
	Updatelocation(ctx context.Context, input *model.Locationupdate) (*model.Promotioncreateddata, error)
	Subscription(ctx context.Context, input []*model.Subscriptionnew) (*model.SubscribedData, error)
	Initialupdate(ctx context.Context, input *model.Updateinfo) (*model.Promotioncreateddata, error)
	Insertsubcategory(ctx context.Context, input []*model.Subcatinsertdata) (*model.Promotioncreateddata, error)
	Subscribemore(ctx context.Context, input []*model.Subscribemoreinput) (*model.SubscribedData, error)
}
type QueryResolver interface {
	Sparkle(ctx context.Context) (*model.Sparkle, error)
	Location(ctx context.Context, tenantid int) (*model.Getalllocations, error)
	Tenantusers(ctx context.Context, tenantid int, userid int) (*model.Usersdata, error)
	GetBusiness(ctx context.Context, tenantid int, categoryid int) (*model.GetBusinessdata, error)
	Getpromotions(ctx context.Context, tenantid int) (*model.Getpromotiondata, error)
	Getpromotypes(ctx context.Context) (*model.Promotypesdata, error)
	Getchargetypes(ctx context.Context) (*model.Chargetypedata, error)
	Getlocationbyid(ctx context.Context, tenantid int, locationid int) (*model.Locationbyiddata, error)
	Getpayments(ctx context.Context, tenantid int, typeid int) (*model.Getpaymentdata, error)
	Getsubscriptions(ctx context.Context, tenantid int) (*model.Getsubscriptionsdata, error)
	Getnonsubscribed(ctx context.Context, tenantid int) (*model.Getnonsubscribeddata, error)
	Getallmodule(ctx context.Context, categoryid int, tenantid int, mode bool) (*model.Getallmoduledata, error)
	Getallpromos(ctx context.Context, moduleid int) (*model.Getallpromodata, error)
	Getsubcategorybyid(ctx context.Context, categoryid int) (*model.Getsubcategorydata, error)
	Gettenantsubcategory(ctx context.Context, tenantid int, categoryid int, moduleid int) (*model.Gettenantsubcategorydata, error)
	Getnonsubscribedcategory(ctx context.Context, tenantid int) (*model.Getnonsubscribedcategorydata, error)
	Gettenantinfo(ctx context.Context, tenantid int) (*model.Result, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Cat.Categoryid":
		if e.complexity.Cat.Categoryid == nil {
			break
		}

		return e.complexity.Cat.Categoryid(childComplexity), true

	case "Cat.Categoryname":
		if e.complexity.Cat.Categoryname == nil {
			break
		}

		return e.complexity.Cat.Categoryname(childComplexity), true

	case "Cat.Categorytype":
		if e.complexity.Cat.Categorytype == nil {
			break
		}

		return e.complexity.Cat.Categorytype(childComplexity), true

	case "Cat.Sortorder":
		if e.complexity.Cat.Sortorder == nil {
			break
		}

		return e.complexity.Cat.Sortorder(childComplexity), true

	case "Cat.Status":
		if e.complexity.Cat.Status == nil {
			break
		}

		return e.complexity.Cat.Status(childComplexity), true

	case "Category.Categoryid":
		if e.complexity.Category.Categoryid == nil {
			break
		}

		return e.complexity.Category.Categoryid(childComplexity), true

	case "Category.Name":
		if e.complexity.Category.Name == nil {
			break
		}

		return e.complexity.Category.Name(childComplexity), true

	case "Category.SortOrder":
		if e.complexity.Category.SortOrder == nil {
			break
		}

		return e.complexity.Category.SortOrder(childComplexity), true

	case "Category.Status":
		if e.complexity.Category.Status == nil {
			break
		}

		return e.complexity.Category.Status(childComplexity), true

	case "Category.Type":
		if e.complexity.Category.Type == nil {
			break
		}

		return e.complexity.Category.Type(childComplexity), true

	case "Custinfo.Address":
		if e.complexity.Custinfo.Address == nil {
			break
		}

		return e.complexity.Custinfo.Address(childComplexity), true

	case "Custinfo.Contact":
		if e.complexity.Custinfo.Contact == nil {
			break
		}

		return e.complexity.Custinfo.Contact(childComplexity), true

	case "Custinfo.Customerid":
		if e.complexity.Custinfo.Customerid == nil {
			break
		}

		return e.complexity.Custinfo.Customerid(childComplexity), true

	case "Custinfo.Email":
		if e.complexity.Custinfo.Email == nil {
			break
		}

		return e.complexity.Custinfo.Email(childComplexity), true

	case "Custinfo.Firstname":
		if e.complexity.Custinfo.Firstname == nil {
			break
		}

		return e.complexity.Custinfo.Firstname(childComplexity), true

	case "Custinfo.Lastname":
		if e.complexity.Custinfo.Lastname == nil {
			break
		}

		return e.complexity.Custinfo.Lastname(childComplexity), true

	case "LocationInfo.createdby":
		if e.complexity.LocationInfo.Createdby == nil {
			break
		}

		return e.complexity.LocationInfo.Createdby(childComplexity), true

	case "LocationInfo.LocationName":
		if e.complexity.LocationInfo.LocationName == nil {
			break
		}

		return e.complexity.LocationInfo.LocationName(childComplexity), true

	case "LocationInfo.Locationid":
		if e.complexity.LocationInfo.Locationid == nil {
			break
		}

		return e.complexity.LocationInfo.Locationid(childComplexity), true

	case "LocationInfo.status":
		if e.complexity.LocationInfo.Status == nil {
			break
		}

		return e.complexity.LocationInfo.Status(childComplexity), true

	case "Module.CategoryId":
		if e.complexity.Module.CategoryID == nil {
			break
		}

		return e.complexity.Module.CategoryID(childComplexity), true

	case "Module.Content":
		if e.complexity.Module.Content == nil {
			break
		}

		return e.complexity.Module.Content(childComplexity), true

	case "Module.ImageUrl":
		if e.complexity.Module.ImageURL == nil {
			break
		}

		return e.complexity.Module.ImageURL(childComplexity), true

	case "Module.LogoUrl":
		if e.complexity.Module.LogoURL == nil {
			break
		}

		return e.complexity.Module.LogoURL(childComplexity), true

	case "Module.ModuleId":
		if e.complexity.Module.ModuleID == nil {
			break
		}

		return e.complexity.Module.ModuleID(childComplexity), true

	case "Module.Name":
		if e.complexity.Module.Name == nil {
			break
		}

		return e.complexity.Module.Name(childComplexity), true

	case "Mutation.createcharges":
		if e.complexity.Mutation.Createcharges == nil {
			break
		}

		args, err := ec.field_Mutation_createcharges_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Createcharges(childComplexity, args["input"].(*model.Chargecreate)), true

	case "Mutation.createlocation":
		if e.complexity.Mutation.Createlocation == nil {
			break
		}

		args, err := ec.field_Mutation_createlocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Createlocation(childComplexity, args["input"].(*model.Location)), true

	case "Mutation.createpromotion":
		if e.complexity.Mutation.Createpromotion == nil {
			break
		}

		args, err := ec.field_Mutation_createpromotion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Createpromotion(childComplexity, args["input"].(*model.Promoinput)), true

	case "Mutation.createtenantuser":
		if e.complexity.Mutation.Createtenantuser == nil {
			break
		}

		args, err := ec.field_Mutation_createtenantuser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Createtenantuser(childComplexity, args["create"].(*model.Tenantuser)), true

	case "Mutation.initialupdate":
		if e.complexity.Mutation.Initialupdate == nil {
			break
		}

		args, err := ec.field_Mutation_initialupdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Initialupdate(childComplexity, args["input"].(*model.Updateinfo)), true

	case "Mutation.insertsubcategory":
		if e.complexity.Mutation.Insertsubcategory == nil {
			break
		}

		args, err := ec.field_Mutation_insertsubcategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Insertsubcategory(childComplexity, args["input"].([]*model.Subcatinsertdata)), true

	case "Mutation.subscribe":
		if e.complexity.Mutation.Subscribe == nil {
			break
		}

		args, err := ec.field_Mutation_subscribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Subscribe(childComplexity, args["input"].(model.Data)), true

	case "Mutation.subscribemore":
		if e.complexity.Mutation.Subscribemore == nil {
			break
		}

		args, err := ec.field_Mutation_subscribemore_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Subscribemore(childComplexity, args["input"].([]*model.Subscribemoreinput)), true

	case "Mutation.subscription":
		if e.complexity.Mutation.Subscription == nil {
			break
		}

		args, err := ec.field_Mutation_subscription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Subscription(childComplexity, args["input"].([]*model.Subscriptionnew)), true

	case "Mutation.updatecharges":
		if e.complexity.Mutation.Updatecharges == nil {
			break
		}

		args, err := ec.field_Mutation_updatecharges_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Updatecharges(childComplexity, args["input"].(*model.Chargeupdate)), true

	case "Mutation.updatelocation":
		if e.complexity.Mutation.Updatelocation == nil {
			break
		}

		args, err := ec.field_Mutation_updatelocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Updatelocation(childComplexity, args["input"].(*model.Locationupdate)), true

	case "Mutation.updatelocationstatus":
		if e.complexity.Mutation.Updatelocationstatus == nil {
			break
		}

		args, err := ec.field_Mutation_updatelocationstatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Updatelocationstatus(childComplexity, args["input"].(*model.Locationstatusinput)), true

	case "Mutation.updatetenantbusiness":
		if e.complexity.Mutation.Updatetenantbusiness == nil {
			break
		}

		args, err := ec.field_Mutation_updatetenantbusiness_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Updatetenantbusiness(childComplexity, args["businessinfo"].(*model.Business)), true

	case "Mutation.updatetenantuser":
		if e.complexity.Mutation.Updatetenantuser == nil {
			break
		}

		args, err := ec.field_Mutation_updatetenantuser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Updatetenantuser(childComplexity, args["update"].(*model.Updatetenant)), true

	case "Package.ModuleId":
		if e.complexity.Package.ModuleID == nil {
			break
		}

		return e.complexity.Package.ModuleID(childComplexity), true

	case "Package.Modulename":
		if e.complexity.Package.Modulename == nil {
			break
		}

		return e.complexity.Package.Modulename(childComplexity), true

	case "Package.Name":
		if e.complexity.Package.Name == nil {
			break
		}

		return e.complexity.Package.Name(childComplexity), true

	case "Package.PackageAmount":
		if e.complexity.Package.PackageAmount == nil {
			break
		}

		return e.complexity.Package.PackageAmount(childComplexity), true

	case "Package.PackageContent":
		if e.complexity.Package.PackageContent == nil {
			break
		}

		return e.complexity.Package.PackageContent(childComplexity), true

	case "Package.PackageId":
		if e.complexity.Package.PackageID == nil {
			break
		}

		return e.complexity.Package.PackageID(childComplexity), true

	case "Package.PackageIcon":
		if e.complexity.Package.PackageIcon == nil {
			break
		}

		return e.complexity.Package.PackageIcon(childComplexity), true

	case "Package.Packageexpiry":
		if e.complexity.Package.Packageexpiry == nil {
			break
		}

		return e.complexity.Package.Packageexpiry(childComplexity), true

	case "Package.PaymentMode":
		if e.complexity.Package.PaymentMode == nil {
			break
		}

		return e.complexity.Package.PaymentMode(childComplexity), true

	case "Package.Promocodeid":
		if e.complexity.Package.Promocodeid == nil {
			break
		}

		return e.complexity.Package.Promocodeid(childComplexity), true

	case "Package.Promodescription":
		if e.complexity.Package.Promodescription == nil {
			break
		}

		return e.complexity.Package.Promodescription(childComplexity), true

	case "Package.Promonname":
		if e.complexity.Package.Promonname == nil {
			break
		}

		return e.complexity.Package.Promonname(childComplexity), true

	case "Package.Promotype":
		if e.complexity.Package.Promotype == nil {
			break
		}

		return e.complexity.Package.Promotype(childComplexity), true

	case "Package.Promovalue":
		if e.complexity.Package.Promovalue == nil {
			break
		}

		return e.complexity.Package.Promovalue(childComplexity), true

	case "Package.Status":
		if e.complexity.Package.Status == nil {
			break
		}

		return e.complexity.Package.Status(childComplexity), true

	case "Package.Validity":
		if e.complexity.Package.Validity == nil {
			break
		}

		return e.complexity.Package.Validity(childComplexity), true

	case "Package.Validitydate":
		if e.complexity.Package.Validitydate == nil {
			break
		}

		return e.complexity.Package.Validitydate(childComplexity), true

	case "Promotion.Broadstatus":
		if e.complexity.Promotion.Broadstatus == nil {
			break
		}

		return e.complexity.Promotion.Broadstatus(childComplexity), true

	case "Promotion.Enddate":
		if e.complexity.Promotion.Enddate == nil {
			break
		}

		return e.complexity.Promotion.Enddate(childComplexity), true

	case "Promotion.Failure":
		if e.complexity.Promotion.Failure == nil {
			break
		}

		return e.complexity.Promotion.Failure(childComplexity), true

	case "Promotion.Promocode":
		if e.complexity.Promotion.Promocode == nil {
			break
		}

		return e.complexity.Promotion.Promocode(childComplexity), true

	case "Promotion.Promotag":
		if e.complexity.Promotion.Promotag == nil {
			break
		}

		return e.complexity.Promotion.Promotag(childComplexity), true

	case "Promotion.Promoterms":
		if e.complexity.Promotion.Promoterms == nil {
			break
		}

		return e.complexity.Promotion.Promoterms(childComplexity), true

	case "Promotion.PromotionId":
		if e.complexity.Promotion.PromotionID == nil {
			break
		}

		return e.complexity.Promotion.PromotionID(childComplexity), true

	case "Promotion.Promotionname":
		if e.complexity.Promotion.Promotionname == nil {
			break
		}

		return e.complexity.Promotion.Promotionname(childComplexity), true

	case "Promotion.Promotiontypeid":
		if e.complexity.Promotion.Promotiontypeid == nil {
			break
		}

		return e.complexity.Promotion.Promotiontypeid(childComplexity), true

	case "Promotion.Promotype":
		if e.complexity.Promotion.Promotype == nil {
			break
		}

		return e.complexity.Promotion.Promotype(childComplexity), true

	case "Promotion.Promovalue":
		if e.complexity.Promotion.Promovalue == nil {
			break
		}

		return e.complexity.Promotion.Promovalue(childComplexity), true

	case "Promotion.Startdate":
		if e.complexity.Promotion.Startdate == nil {
			break
		}

		return e.complexity.Promotion.Startdate(childComplexity), true

	case "Promotion.Status":
		if e.complexity.Promotion.Status == nil {
			break
		}

		return e.complexity.Promotion.Status(childComplexity), true

	case "Promotion.Success":
		if e.complexity.Promotion.Success == nil {
			break
		}

		return e.complexity.Promotion.Success(childComplexity), true

	case "Promotion.Tenantame":
		if e.complexity.Promotion.Tenantame == nil {
			break
		}

		return e.complexity.Promotion.Tenantame(childComplexity), true

	case "Promotion.Tenantid":
		if e.complexity.Promotion.Tenantid == nil {
			break
		}

		return e.complexity.Promotion.Tenantid(childComplexity), true

	case "Query.getBusiness":
		if e.complexity.Query.GetBusiness == nil {
			break
		}

		args, err := ec.field_Query_getBusiness_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusiness(childComplexity, args["tenantid"].(int), args["categoryid"].(int)), true

	case "Query.getallmodule":
		if e.complexity.Query.Getallmodule == nil {
			break
		}

		args, err := ec.field_Query_getallmodule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Getallmodule(childComplexity, args["categoryid"].(int), args["tenantid"].(int), args["mode"].(bool)), true

	case "Query.getallpromos":
		if e.complexity.Query.Getallpromos == nil {
			break
		}

		args, err := ec.field_Query_getallpromos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Getallpromos(childComplexity, args["moduleid"].(int)), true

	case "Query.getchargetypes":
		if e.complexity.Query.Getchargetypes == nil {
			break
		}

		return e.complexity.Query.Getchargetypes(childComplexity), true

	case "Query.getlocationbyid":
		if e.complexity.Query.Getlocationbyid == nil {
			break
		}

		args, err := ec.field_Query_getlocationbyid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Getlocationbyid(childComplexity, args["tenantid"].(int), args["locationid"].(int)), true

	case "Query.getnonsubscribed":
		if e.complexity.Query.Getnonsubscribed == nil {
			break
		}

		args, err := ec.field_Query_getnonsubscribed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Getnonsubscribed(childComplexity, args["tenantid"].(int)), true

	case "Query.getnonsubscribedcategory":
		if e.complexity.Query.Getnonsubscribedcategory == nil {
			break
		}

		args, err := ec.field_Query_getnonsubscribedcategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Getnonsubscribedcategory(childComplexity, args["tenantid"].(int)), true

	case "Query.getpayments":
		if e.complexity.Query.Getpayments == nil {
			break
		}

		args, err := ec.field_Query_getpayments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Getpayments(childComplexity, args["tenantid"].(int), args["typeid"].(int)), true

	case "Query.getpromotions":
		if e.complexity.Query.Getpromotions == nil {
			break
		}

		args, err := ec.field_Query_getpromotions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Getpromotions(childComplexity, args["tenantid"].(int)), true

	case "Query.getpromotypes":
		if e.complexity.Query.Getpromotypes == nil {
			break
		}

		return e.complexity.Query.Getpromotypes(childComplexity), true

	case "Query.getsubcategorybyid":
		if e.complexity.Query.Getsubcategorybyid == nil {
			break
		}

		args, err := ec.field_Query_getsubcategorybyid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Getsubcategorybyid(childComplexity, args["categoryid"].(int)), true

	case "Query.getsubscriptions":
		if e.complexity.Query.Getsubscriptions == nil {
			break
		}

		args, err := ec.field_Query_getsubscriptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Getsubscriptions(childComplexity, args["tenantid"].(int)), true

	case "Query.gettenantinfo":
		if e.complexity.Query.Gettenantinfo == nil {
			break
		}

		args, err := ec.field_Query_gettenantinfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Gettenantinfo(childComplexity, args["tenantid"].(int)), true

	case "Query.gettenantsubcategory":
		if e.complexity.Query.Gettenantsubcategory == nil {
			break
		}

		args, err := ec.field_Query_gettenantsubcategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Gettenantsubcategory(childComplexity, args["tenantid"].(int), args["categoryid"].(int), args["moduleid"].(int)), true

	case "Query.location":
		if e.complexity.Query.Location == nil {
			break
		}

		args, err := ec.field_Query_location_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Location(childComplexity, args["tenantid"].(int)), true

	case "Query.sparkle":
		if e.complexity.Query.Sparkle == nil {
			break
		}

		return e.complexity.Query.Sparkle(childComplexity), true

	case "Query.tenantusers":
		if e.complexity.Query.Tenantusers == nil {
			break
		}

		args, err := ec.field_Query_tenantusers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tenantusers(childComplexity, args["tenantid"].(int), args["userid"].(int)), true

	case "Sparkle.category":
		if e.complexity.Sparkle.Category == nil {
			break
		}

		return e.complexity.Sparkle.Category(childComplexity), true

	case "Sparkle.package":
		if e.complexity.Sparkle.Package == nil {
			break
		}

		return e.complexity.Sparkle.Package(childComplexity), true

	case "Sparkle.subcategory":
		if e.complexity.Sparkle.Subcategory == nil {
			break
		}

		return e.complexity.Sparkle.Subcategory(childComplexity), true

	case "SubCategory.CategoryId":
		if e.complexity.SubCategory.CategoryID == nil {
			break
		}

		return e.complexity.SubCategory.CategoryID(childComplexity), true

	case "SubCategory.Icon":
		if e.complexity.SubCategory.Icon == nil {
			break
		}

		return e.complexity.SubCategory.Icon(childComplexity), true

	case "SubCategory.Name":
		if e.complexity.SubCategory.Name == nil {
			break
		}

		return e.complexity.SubCategory.Name(childComplexity), true

	case "SubCategory.SortOrder":
		if e.complexity.SubCategory.SortOrder == nil {
			break
		}

		return e.complexity.SubCategory.SortOrder(childComplexity), true

	case "SubCategory.Status":
		if e.complexity.SubCategory.Status == nil {
			break
		}

		return e.complexity.SubCategory.Status(childComplexity), true

	case "SubCategory.SubCategoryId":
		if e.complexity.SubCategory.SubCategoryID == nil {
			break
		}

		return e.complexity.SubCategory.SubCategoryID(childComplexity), true

	case "SubCategory.Type":
		if e.complexity.SubCategory.Type == nil {
			break
		}

		return e.complexity.SubCategory.Type(childComplexity), true

	case "TenantData.Categoryid":
		if e.complexity.TenantData.Categoryid == nil {
			break
		}

		return e.complexity.TenantData.Categoryid(childComplexity), true

	case "TenantData.Featureid":
		if e.complexity.TenantData.Featureid == nil {
			break
		}

		return e.complexity.TenantData.Featureid(childComplexity), true

	case "TenantData.Locationid":
		if e.complexity.TenantData.Locationid == nil {
			break
		}

		return e.complexity.TenantData.Locationid(childComplexity), true

	case "TenantData.Locationname":
		if e.complexity.TenantData.Locationname == nil {
			break
		}

		return e.complexity.TenantData.Locationname(childComplexity), true

	case "TenantData.Moduleid":
		if e.complexity.TenantData.Moduleid == nil {
			break
		}

		return e.complexity.TenantData.Moduleid(childComplexity), true

	case "TenantData.Modulename":
		if e.complexity.TenantData.Modulename == nil {
			break
		}

		return e.complexity.TenantData.Modulename(childComplexity), true

	case "TenantData.Subcategoryid":
		if e.complexity.TenantData.Subcategoryid == nil {
			break
		}

		return e.complexity.TenantData.Subcategoryid(childComplexity), true

	case "TenantData.Subscriptionid":
		if e.complexity.TenantData.Subscriptionid == nil {
			break
		}

		return e.complexity.TenantData.Subscriptionid(childComplexity), true

	case "TenantData.Taxamount":
		if e.complexity.TenantData.Taxamount == nil {
			break
		}

		return e.complexity.TenantData.Taxamount(childComplexity), true

	case "TenantData.Tenantaccid":
		if e.complexity.TenantData.Tenantaccid == nil {
			break
		}

		return e.complexity.TenantData.Tenantaccid(childComplexity), true

	case "TenantData.Tenantid":
		if e.complexity.TenantData.Tenantid == nil {
			break
		}

		return e.complexity.TenantData.Tenantid(childComplexity), true

	case "TenantData.Tenantname":
		if e.complexity.TenantData.Tenantname == nil {
			break
		}

		return e.complexity.TenantData.Tenantname(childComplexity), true

	case "TenantData.Totalamount":
		if e.complexity.TenantData.Totalamount == nil {
			break
		}

		return e.complexity.TenantData.Totalamount(childComplexity), true

	case "Tenantschema.about":
		if e.complexity.Tenantschema.About == nil {
			break
		}

		return e.complexity.Tenantschema.About(childComplexity), true

	case "Tenantschema.address":
		if e.complexity.Tenantschema.Address == nil {
			break
		}

		return e.complexity.Tenantschema.Address(childComplexity), true

	case "Tenantschema.brandname":
		if e.complexity.Tenantschema.Brandname == nil {
			break
		}

		return e.complexity.Tenantschema.Brandname(childComplexity), true

	case "Tenantschema.cod":
		if e.complexity.Tenantschema.Cod == nil {
			break
		}

		return e.complexity.Tenantschema.Cod(childComplexity), true

	case "Tenantschema.digital":
		if e.complexity.Tenantschema.Digital == nil {
			break
		}

		return e.complexity.Tenantschema.Digital(childComplexity), true

	case "Tenantschema.email":
		if e.complexity.Tenantschema.Email == nil {
			break
		}

		return e.complexity.Tenantschema.Email(childComplexity), true

	case "Tenantschema.Moduleid":
		if e.complexity.Tenantschema.Moduleid == nil {
			break
		}

		return e.complexity.Tenantschema.Moduleid(childComplexity), true

	case "Tenantschema.Modulename":
		if e.complexity.Tenantschema.Modulename == nil {
			break
		}

		return e.complexity.Tenantschema.Modulename(childComplexity), true

	case "Tenantschema.phone":
		if e.complexity.Tenantschema.Phone == nil {
			break
		}

		return e.complexity.Tenantschema.Phone(childComplexity), true

	case "Tenantschema.tenantaccid":
		if e.complexity.Tenantschema.Tenantaccid == nil {
			break
		}

		return e.complexity.Tenantschema.Tenantaccid(childComplexity), true

	case "Tenantschema.Tenantid":
		if e.complexity.Tenantschema.Tenantid == nil {
			break
		}

		return e.complexity.Tenantschema.Tenantid(childComplexity), true

	case "Tenantschema.tenantimage":
		if e.complexity.Tenantschema.Tenantimage == nil {
			break
		}

		return e.complexity.Tenantschema.Tenantimage(childComplexity), true

	case "Tenantschema.tenanttoken":
		if e.complexity.Tenantschema.Tenanttoken == nil {
			break
		}

		return e.complexity.Tenantschema.Tenanttoken(childComplexity), true

	case "businessdata.code":
		if e.complexity.Businessdata.Code == nil {
			break
		}

		return e.complexity.Businessdata.Code(childComplexity), true

	case "businessdata.message":
		if e.complexity.Businessdata.Message == nil {
			break
		}

		return e.complexity.Businessdata.Message(childComplexity), true

	case "businessdata.status":
		if e.complexity.Businessdata.Status == nil {
			break
		}

		return e.complexity.Businessdata.Status(childComplexity), true

	case "businessdata.updated":
		if e.complexity.Businessdata.Updated == nil {
			break
		}

		return e.complexity.Businessdata.Updated(childComplexity), true

	case "chargetype.Chargeid":
		if e.complexity.Chargetype.Chargeid == nil {
			break
		}

		return e.complexity.Chargetype.Chargeid(childComplexity), true

	case "chargetype.Chargename":
		if e.complexity.Chargetype.Chargename == nil {
			break
		}

		return e.complexity.Chargetype.Chargename(childComplexity), true

	case "chargetype.Status":
		if e.complexity.Chargetype.Status == nil {
			break
		}

		return e.complexity.Chargetype.Status(childComplexity), true

	case "chargetypedata.code":
		if e.complexity.Chargetypedata.Code == nil {
			break
		}

		return e.complexity.Chargetypedata.Code(childComplexity), true

	case "chargetypedata.message":
		if e.complexity.Chargetypedata.Message == nil {
			break
		}

		return e.complexity.Chargetypedata.Message(childComplexity), true

	case "chargetypedata.status":
		if e.complexity.Chargetypedata.Status == nil {
			break
		}

		return e.complexity.Chargetypedata.Status(childComplexity), true

	case "chargetypedata.types":
		if e.complexity.Chargetypedata.Types == nil {
			break
		}

		return e.complexity.Chargetypedata.Types(childComplexity), true

	case "deliverycharge.Locationid":
		if e.complexity.Deliverycharge.Locationid == nil {
			break
		}

		return e.complexity.Deliverycharge.Locationid(childComplexity), true

	case "deliverycharge.Settingsid":
		if e.complexity.Deliverycharge.Settingsid == nil {
			break
		}

		return e.complexity.Deliverycharge.Settingsid(childComplexity), true

	case "deliverycharge.Slab":
		if e.complexity.Deliverycharge.Slab == nil {
			break
		}

		return e.complexity.Deliverycharge.Slab(childComplexity), true

	case "deliverycharge.Slabcharge":
		if e.complexity.Deliverycharge.Slabcharge == nil {
			break
		}

		return e.complexity.Deliverycharge.Slabcharge(childComplexity), true

	case "deliverycharge.Slablimit":
		if e.complexity.Deliverycharge.Slablimit == nil {
			break
		}

		return e.complexity.Deliverycharge.Slablimit(childComplexity), true

	case "deliverycharge.Slabtype":
		if e.complexity.Deliverycharge.Slabtype == nil {
			break
		}

		return e.complexity.Deliverycharge.Slabtype(childComplexity), true

	case "deliverycharge.Tenantid":
		if e.complexity.Deliverycharge.Tenantid == nil {
			break
		}

		return e.complexity.Deliverycharge.Tenantid(childComplexity), true

	case "getBusinessdata.businessinfo":
		if e.complexity.GetBusinessdata.Businessinfo == nil {
			break
		}

		return e.complexity.GetBusinessdata.Businessinfo(childComplexity), true

	case "getBusinessdata.code":
		if e.complexity.GetBusinessdata.Code == nil {
			break
		}

		return e.complexity.GetBusinessdata.Code(childComplexity), true

	case "getBusinessdata.message":
		if e.complexity.GetBusinessdata.Message == nil {
			break
		}

		return e.complexity.GetBusinessdata.Message(childComplexity), true

	case "getBusinessdata.status":
		if e.complexity.GetBusinessdata.Status == nil {
			break
		}

		return e.complexity.GetBusinessdata.Status(childComplexity), true

	case "getalllocations.code":
		if e.complexity.Getalllocations.Code == nil {
			break
		}

		return e.complexity.Getalllocations.Code(childComplexity), true

	case "getalllocations.locations":
		if e.complexity.Getalllocations.Locations == nil {
			break
		}

		return e.complexity.Getalllocations.Locations(childComplexity), true

	case "getalllocations.message":
		if e.complexity.Getalllocations.Message == nil {
			break
		}

		return e.complexity.Getalllocations.Message(childComplexity), true

	case "getalllocations.status":
		if e.complexity.Getalllocations.Status == nil {
			break
		}

		return e.complexity.Getalllocations.Status(childComplexity), true

	case "getallmoduledata.code":
		if e.complexity.Getallmoduledata.Code == nil {
			break
		}

		return e.complexity.Getallmoduledata.Code(childComplexity), true

	case "getallmoduledata.message":
		if e.complexity.Getallmoduledata.Message == nil {
			break
		}

		return e.complexity.Getallmoduledata.Message(childComplexity), true

	case "getallmoduledata.modules":
		if e.complexity.Getallmoduledata.Modules == nil {
			break
		}

		return e.complexity.Getallmoduledata.Modules(childComplexity), true

	case "getallmoduledata.status":
		if e.complexity.Getallmoduledata.Status == nil {
			break
		}

		return e.complexity.Getallmoduledata.Status(childComplexity), true

	case "getallpromodata.code":
		if e.complexity.Getallpromodata.Code == nil {
			break
		}

		return e.complexity.Getallpromodata.Code(childComplexity), true

	case "getallpromodata.message":
		if e.complexity.Getallpromodata.Message == nil {
			break
		}

		return e.complexity.Getallpromodata.Message(childComplexity), true

	case "getallpromodata.promos":
		if e.complexity.Getallpromodata.Promos == nil {
			break
		}

		return e.complexity.Getallpromodata.Promos(childComplexity), true

	case "getallpromodata.status":
		if e.complexity.Getallpromodata.Status == nil {
			break
		}

		return e.complexity.Getallpromodata.Status(childComplexity), true

	case "getnonsubscribedcategorydata.category":
		if e.complexity.Getnonsubscribedcategorydata.Category == nil {
			break
		}

		return e.complexity.Getnonsubscribedcategorydata.Category(childComplexity), true

	case "getnonsubscribedcategorydata.code":
		if e.complexity.Getnonsubscribedcategorydata.Code == nil {
			break
		}

		return e.complexity.Getnonsubscribedcategorydata.Code(childComplexity), true

	case "getnonsubscribedcategorydata.message":
		if e.complexity.Getnonsubscribedcategorydata.Message == nil {
			break
		}

		return e.complexity.Getnonsubscribedcategorydata.Message(childComplexity), true

	case "getnonsubscribedcategorydata.status":
		if e.complexity.Getnonsubscribedcategorydata.Status == nil {
			break
		}

		return e.complexity.Getnonsubscribedcategorydata.Status(childComplexity), true

	case "getnonsubscribeddata.code":
		if e.complexity.Getnonsubscribeddata.Code == nil {
			break
		}

		return e.complexity.Getnonsubscribeddata.Code(childComplexity), true

	case "getnonsubscribeddata.message":
		if e.complexity.Getnonsubscribeddata.Message == nil {
			break
		}

		return e.complexity.Getnonsubscribeddata.Message(childComplexity), true

	case "getnonsubscribeddata.nonsubscribed":
		if e.complexity.Getnonsubscribeddata.Nonsubscribed == nil {
			break
		}

		return e.complexity.Getnonsubscribeddata.Nonsubscribed(childComplexity), true

	case "getnonsubscribeddata.status":
		if e.complexity.Getnonsubscribeddata.Status == nil {
			break
		}

		return e.complexity.Getnonsubscribeddata.Status(childComplexity), true

	case "getpaymentdata.code":
		if e.complexity.Getpaymentdata.Code == nil {
			break
		}

		return e.complexity.Getpaymentdata.Code(childComplexity), true

	case "getpaymentdata.message":
		if e.complexity.Getpaymentdata.Message == nil {
			break
		}

		return e.complexity.Getpaymentdata.Message(childComplexity), true

	case "getpaymentdata.payments":
		if e.complexity.Getpaymentdata.Payments == nil {
			break
		}

		return e.complexity.Getpaymentdata.Payments(childComplexity), true

	case "getpaymentdata.status":
		if e.complexity.Getpaymentdata.Status == nil {
			break
		}

		return e.complexity.Getpaymentdata.Status(childComplexity), true

	case "getpromotiondata.code":
		if e.complexity.Getpromotiondata.Code == nil {
			break
		}

		return e.complexity.Getpromotiondata.Code(childComplexity), true

	case "getpromotiondata.message":
		if e.complexity.Getpromotiondata.Message == nil {
			break
		}

		return e.complexity.Getpromotiondata.Message(childComplexity), true

	case "getpromotiondata.promotions":
		if e.complexity.Getpromotiondata.Promotions == nil {
			break
		}

		return e.complexity.Getpromotiondata.Promotions(childComplexity), true

	case "getpromotiondata.status":
		if e.complexity.Getpromotiondata.Status == nil {
			break
		}

		return e.complexity.Getpromotiondata.Status(childComplexity), true

	case "getsubcategorydata.code":
		if e.complexity.Getsubcategorydata.Code == nil {
			break
		}

		return e.complexity.Getsubcategorydata.Code(childComplexity), true

	case "getsubcategorydata.message":
		if e.complexity.Getsubcategorydata.Message == nil {
			break
		}

		return e.complexity.Getsubcategorydata.Message(childComplexity), true

	case "getsubcategorydata.status":
		if e.complexity.Getsubcategorydata.Status == nil {
			break
		}

		return e.complexity.Getsubcategorydata.Status(childComplexity), true

	case "getsubcategorydata.subcategories":
		if e.complexity.Getsubcategorydata.Subcategories == nil {
			break
		}

		return e.complexity.Getsubcategorydata.Subcategories(childComplexity), true

	case "getsubscriptionsdata.code":
		if e.complexity.Getsubscriptionsdata.Code == nil {
			break
		}

		return e.complexity.Getsubscriptionsdata.Code(childComplexity), true

	case "getsubscriptionsdata.message":
		if e.complexity.Getsubscriptionsdata.Message == nil {
			break
		}

		return e.complexity.Getsubscriptionsdata.Message(childComplexity), true

	case "getsubscriptionsdata.status":
		if e.complexity.Getsubscriptionsdata.Status == nil {
			break
		}

		return e.complexity.Getsubscriptionsdata.Status(childComplexity), true

	case "getsubscriptionsdata.subscribed":
		if e.complexity.Getsubscriptionsdata.Subscribed == nil {
			break
		}

		return e.complexity.Getsubscriptionsdata.Subscribed(childComplexity), true

	case "gettenantsubcategorydata.code":
		if e.complexity.Gettenantsubcategorydata.Code == nil {
			break
		}

		return e.complexity.Gettenantsubcategorydata.Code(childComplexity), true

	case "gettenantsubcategorydata.message":
		if e.complexity.Gettenantsubcategorydata.Message == nil {
			break
		}

		return e.complexity.Gettenantsubcategorydata.Message(childComplexity), true

	case "gettenantsubcategorydata.status":
		if e.complexity.Gettenantsubcategorydata.Status == nil {
			break
		}

		return e.complexity.Gettenantsubcategorydata.Status(childComplexity), true

	case "gettenantsubcategorydata.tenantsubcategories":
		if e.complexity.Gettenantsubcategorydata.Tenantsubcategories == nil {
			break
		}

		return e.complexity.Gettenantsubcategorydata.Tenantsubcategories(childComplexity), true

	case "info.about":
		if e.complexity.Info.About == nil {
			break
		}

		return e.complexity.Info.About(childComplexity), true

	case "info.address":
		if e.complexity.Info.Address == nil {
			break
		}

		return e.complexity.Info.Address(childComplexity), true

	case "info.brandname":
		if e.complexity.Info.Brandname == nil {
			break
		}

		return e.complexity.Info.Brandname(childComplexity), true

	case "info.cod":
		if e.complexity.Info.Cod == nil {
			break
		}

		return e.complexity.Info.Cod(childComplexity), true

	case "info.countrycode":
		if e.complexity.Info.Countrycode == nil {
			break
		}

		return e.complexity.Info.Countrycode(childComplexity), true

	case "info.currencycode":
		if e.complexity.Info.Currencycode == nil {
			break
		}

		return e.complexity.Info.Currencycode(childComplexity), true

	case "info.currencysymbol":
		if e.complexity.Info.Currencysymbol == nil {
			break
		}

		return e.complexity.Info.Currencysymbol(childComplexity), true

	case "info.digital":
		if e.complexity.Info.Digital == nil {
			break
		}

		return e.complexity.Info.Digital(childComplexity), true

	case "info.email":
		if e.complexity.Info.Email == nil {
			break
		}

		return e.complexity.Info.Email(childComplexity), true

	case "info.moduleid":
		if e.complexity.Info.Moduleid == nil {
			break
		}

		return e.complexity.Info.Moduleid(childComplexity), true

	case "info.modulename":
		if e.complexity.Info.Modulename == nil {
			break
		}

		return e.complexity.Info.Modulename(childComplexity), true

	case "info.phone":
		if e.complexity.Info.Phone == nil {
			break
		}

		return e.complexity.Info.Phone(childComplexity), true

	case "info.social":
		if e.complexity.Info.Social == nil {
			break
		}

		return e.complexity.Info.Social(childComplexity), true

	case "info.tenantaccid":
		if e.complexity.Info.Tenantaccid == nil {
			break
		}

		return e.complexity.Info.Tenantaccid(childComplexity), true

	case "info.tenantid":
		if e.complexity.Info.Tenantid == nil {
			break
		}

		return e.complexity.Info.Tenantid(childComplexity), true

	case "info.tenantimage":
		if e.complexity.Info.Tenantimage == nil {
			break
		}

		return e.complexity.Info.Tenantimage(childComplexity), true

	case "info.tenanttoken":
		if e.complexity.Info.Tenanttoken == nil {
			break
		}

		return e.complexity.Info.Tenanttoken(childComplexity), true

	case "locationbyiddata.code":
		if e.complexity.Locationbyiddata.Code == nil {
			break
		}

		return e.complexity.Locationbyiddata.Code(childComplexity), true

	case "locationbyiddata.locationdata":
		if e.complexity.Locationbyiddata.Locationdata == nil {
			break
		}

		return e.complexity.Locationbyiddata.Locationdata(childComplexity), true

	case "locationbyiddata.message":
		if e.complexity.Locationbyiddata.Message == nil {
			break
		}

		return e.complexity.Locationbyiddata.Message(childComplexity), true

	case "locationbyiddata.status":
		if e.complexity.Locationbyiddata.Status == nil {
			break
		}

		return e.complexity.Locationbyiddata.Status(childComplexity), true

	case "locationdata.code":
		if e.complexity.Locationdata.Code == nil {
			break
		}

		return e.complexity.Locationdata.Code(childComplexity), true

	case "locationdata.locationinfo":
		if e.complexity.Locationdata.Locationinfo == nil {
			break
		}

		return e.complexity.Locationdata.Locationinfo(childComplexity), true

	case "locationdata.message":
		if e.complexity.Locationdata.Message == nil {
			break
		}

		return e.complexity.Locationdata.Message(childComplexity), true

	case "locationdata.status":
		if e.complexity.Locationdata.Status == nil {
			break
		}

		return e.complexity.Locationdata.Status(childComplexity), true

	case "locationgetall.address":
		if e.complexity.Locationgetall.Address == nil {
			break
		}

		return e.complexity.Locationgetall.Address(childComplexity), true

	case "locationgetall.city":
		if e.complexity.Locationgetall.City == nil {
			break
		}

		return e.complexity.Locationgetall.City(childComplexity), true

	case "locationgetall.closingtime":
		if e.complexity.Locationgetall.Closingtime == nil {
			break
		}

		return e.complexity.Locationgetall.Closingtime(childComplexity), true

	case "locationgetall.contact":
		if e.complexity.Locationgetall.Contact == nil {
			break
		}

		return e.complexity.Locationgetall.Contact(childComplexity), true

	case "locationgetall.countycode":
		if e.complexity.Locationgetall.Countycode == nil {
			break
		}

		return e.complexity.Locationgetall.Countycode(childComplexity), true

	case "locationgetall.createdby":
		if e.complexity.Locationgetall.Createdby == nil {
			break
		}

		return e.complexity.Locationgetall.Createdby(childComplexity), true

	case "locationgetall.delivery":
		if e.complexity.Locationgetall.Delivery == nil {
			break
		}

		return e.complexity.Locationgetall.Delivery(childComplexity), true

	case "locationgetall.deliverycharges":
		if e.complexity.Locationgetall.Deliverycharges == nil {
			break
		}

		return e.complexity.Locationgetall.Deliverycharges(childComplexity), true

	case "locationgetall.deliverymins":
		if e.complexity.Locationgetall.Deliverymins == nil {
			break
		}

		return e.complexity.Locationgetall.Deliverymins(childComplexity), true

	case "locationgetall.deliverytype":
		if e.complexity.Locationgetall.Deliverytype == nil {
			break
		}

		return e.complexity.Locationgetall.Deliverytype(childComplexity), true

	case "locationgetall.email":
		if e.complexity.Locationgetall.Email == nil {
			break
		}

		return e.complexity.Locationgetall.Email(childComplexity), true

	case "locationgetall.latitude":
		if e.complexity.Locationgetall.Latitude == nil {
			break
		}

		return e.complexity.Locationgetall.Latitude(childComplexity), true

	case "locationgetall.locationName":
		if e.complexity.Locationgetall.LocationName == nil {
			break
		}

		return e.complexity.Locationgetall.LocationName(childComplexity), true

	case "locationgetall.locationid":
		if e.complexity.Locationgetall.Locationid == nil {
			break
		}

		return e.complexity.Locationgetall.Locationid(childComplexity), true

	case "locationgetall.longitude":
		if e.complexity.Locationgetall.Longitude == nil {
			break
		}

		return e.complexity.Locationgetall.Longitude(childComplexity), true

	case "locationgetall.openingtime":
		if e.complexity.Locationgetall.Openingtime == nil {
			break
		}

		return e.complexity.Locationgetall.Openingtime(childComplexity), true

	case "locationgetall.othercharges":
		if e.complexity.Locationgetall.Othercharges == nil {
			break
		}

		return e.complexity.Locationgetall.Othercharges(childComplexity), true

	case "locationgetall.postcode":
		if e.complexity.Locationgetall.Postcode == nil {
			break
		}

		return e.complexity.Locationgetall.Postcode(childComplexity), true

	case "locationgetall.state":
		if e.complexity.Locationgetall.State == nil {
			break
		}

		return e.complexity.Locationgetall.State(childComplexity), true

	case "locationgetall.status":
		if e.complexity.Locationgetall.Status == nil {
			break
		}

		return e.complexity.Locationgetall.Status(childComplexity), true

	case "locationgetall.suburb":
		if e.complexity.Locationgetall.Suburb == nil {
			break
		}

		return e.complexity.Locationgetall.Suburb(childComplexity), true

	case "locationgetall.tenantid":
		if e.complexity.Locationgetall.Tenantid == nil {
			break
		}

		return e.complexity.Locationgetall.Tenantid(childComplexity), true

	case "locationgetall.tenantusers":
		if e.complexity.Locationgetall.Tenantusers == nil {
			break
		}

		return e.complexity.Locationgetall.Tenantusers(childComplexity), true

	case "mod.Amount":
		if e.complexity.Mod.Amount == nil {
			break
		}

		return e.complexity.Mod.Amount(childComplexity), true

	case "mod.Baseprice":
		if e.complexity.Mod.Baseprice == nil {
			break
		}

		return e.complexity.Mod.Baseprice(childComplexity), true

	case "mod.Categoryid":
		if e.complexity.Mod.Categoryid == nil {
			break
		}

		return e.complexity.Mod.Categoryid(childComplexity), true

	case "mod.Content":
		if e.complexity.Mod.Content == nil {
			break
		}

		return e.complexity.Mod.Content(childComplexity), true

	case "mod.Iconurl":
		if e.complexity.Mod.Iconurl == nil {
			break
		}

		return e.complexity.Mod.Iconurl(childComplexity), true

	case "mod.Logourl":
		if e.complexity.Mod.Logourl == nil {
			break
		}

		return e.complexity.Mod.Logourl(childComplexity), true

	case "mod.Moduleid":
		if e.complexity.Mod.Moduleid == nil {
			break
		}

		return e.complexity.Mod.Moduleid(childComplexity), true

	case "mod.Modulename":
		if e.complexity.Mod.Modulename == nil {
			break
		}

		return e.complexity.Mod.Modulename(childComplexity), true

	case "mod.Subcategoryid":
		if e.complexity.Mod.Subcategoryid == nil {
			break
		}

		return e.complexity.Mod.Subcategoryid(childComplexity), true

	case "mod.Subcategoryname":
		if e.complexity.Mod.Subcategoryname == nil {
			break
		}

		return e.complexity.Mod.Subcategoryname(childComplexity), true

	case "mod.Taxamount":
		if e.complexity.Mod.Taxamount == nil {
			break
		}

		return e.complexity.Mod.Taxamount(childComplexity), true

	case "mod.Taxpercent":
		if e.complexity.Mod.Taxpercent == nil {
			break
		}

		return e.complexity.Mod.Taxpercent(childComplexity), true

	case "othercharge.Chargeid":
		if e.complexity.Othercharge.Chargeid == nil {
			break
		}

		return e.complexity.Othercharge.Chargeid(childComplexity), true

	case "othercharge.Chargename":
		if e.complexity.Othercharge.Chargename == nil {
			break
		}

		return e.complexity.Othercharge.Chargename(childComplexity), true

	case "othercharge.Chargetype":
		if e.complexity.Othercharge.Chargetype == nil {
			break
		}

		return e.complexity.Othercharge.Chargetype(childComplexity), true

	case "othercharge.Chargevalue":
		if e.complexity.Othercharge.Chargevalue == nil {
			break
		}

		return e.complexity.Othercharge.Chargevalue(childComplexity), true

	case "othercharge.Locationid":
		if e.complexity.Othercharge.Locationid == nil {
			break
		}

		return e.complexity.Othercharge.Locationid(childComplexity), true

	case "othercharge.Tenantchargeid":
		if e.complexity.Othercharge.Tenantchargeid == nil {
			break
		}

		return e.complexity.Othercharge.Tenantchargeid(childComplexity), true

	case "othercharge.Tenantid":
		if e.complexity.Othercharge.Tenantid == nil {
			break
		}

		return e.complexity.Othercharge.Tenantid(childComplexity), true

	case "paymentdata.Amount":
		if e.complexity.Paymentdata.Amount == nil {
			break
		}

		return e.complexity.Paymentdata.Amount(childComplexity), true

	case "paymentdata.Chargeid":
		if e.complexity.Paymentdata.Chargeid == nil {
			break
		}

		return e.complexity.Paymentdata.Chargeid(childComplexity), true

	case "paymentdata.Created":
		if e.complexity.Paymentdata.Created == nil {
			break
		}

		return e.complexity.Paymentdata.Created(childComplexity), true

	case "paymentdata.Customerid":
		if e.complexity.Paymentdata.Customerid == nil {
			break
		}

		return e.complexity.Paymentdata.Customerid(childComplexity), true

	case "paymentdata.Locationid":
		if e.complexity.Paymentdata.Locationid == nil {
			break
		}

		return e.complexity.Paymentdata.Locationid(childComplexity), true

	case "paymentdata.Moduleid":
		if e.complexity.Paymentdata.Moduleid == nil {
			break
		}

		return e.complexity.Paymentdata.Moduleid(childComplexity), true

	case "paymentdata.Orderid":
		if e.complexity.Paymentdata.Orderid == nil {
			break
		}

		return e.complexity.Paymentdata.Orderid(childComplexity), true

	case "paymentdata.Paymentdetails":
		if e.complexity.Paymentdata.Paymentdetails == nil {
			break
		}

		return e.complexity.Paymentdata.Paymentdetails(childComplexity), true

	case "paymentdata.Paymentid":
		if e.complexity.Paymentdata.Paymentid == nil {
			break
		}

		return e.complexity.Paymentdata.Paymentid(childComplexity), true

	case "paymentdata.Paymentref":
		if e.complexity.Paymentdata.Paymentref == nil {
			break
		}

		return e.complexity.Paymentdata.Paymentref(childComplexity), true

	case "paymentdata.Paymentstatus":
		if e.complexity.Paymentdata.Paymentstatus == nil {
			break
		}

		return e.complexity.Paymentdata.Paymentstatus(childComplexity), true

	case "paymentdata.Paymenttypeid":
		if e.complexity.Paymentdata.Paymenttypeid == nil {
			break
		}

		return e.complexity.Paymentdata.Paymenttypeid(childComplexity), true

	case "paymentdata.Refundamt":
		if e.complexity.Paymentdata.Refundamt == nil {
			break
		}

		return e.complexity.Paymentdata.Refundamt(childComplexity), true

	case "paymentdata.Tenantid":
		if e.complexity.Paymentdata.Tenantid == nil {
			break
		}

		return e.complexity.Paymentdata.Tenantid(childComplexity), true

	case "paymentdata.Transactiondate":
		if e.complexity.Paymentdata.Transactiondate == nil {
			break
		}

		return e.complexity.Paymentdata.Transactiondate(childComplexity), true

	case "paymentdetaildata.Amount":
		if e.complexity.Paymentdetaildata.Amount == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Amount(childComplexity), true

	case "paymentdetaildata.Customerinfo":
		if e.complexity.Paymentdetaildata.Customerinfo == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Customerinfo(childComplexity), true

	case "paymentdetaildata.Locationid":
		if e.complexity.Paymentdetaildata.Locationid == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Locationid(childComplexity), true

	case "paymentdetaildata.Moduleid":
		if e.complexity.Paymentdetaildata.Moduleid == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Moduleid(childComplexity), true

	case "paymentdetaildata.Orderid":
		if e.complexity.Paymentdetaildata.Orderid == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Orderid(childComplexity), true

	case "paymentdetaildata.Payamount":
		if e.complexity.Paymentdetaildata.Payamount == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Payamount(childComplexity), true

	case "paymentdetaildata.Paymentdetailid":
		if e.complexity.Paymentdetaildata.Paymentdetailid == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Paymentdetailid(childComplexity), true

	case "paymentdetaildata.Paymentid":
		if e.complexity.Paymentdetaildata.Paymentid == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Paymentid(childComplexity), true

	case "paymentdetaildata.Subscriptionid":
		if e.complexity.Paymentdetaildata.Subscriptionid == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Subscriptionid(childComplexity), true

	case "paymentdetaildata.Taxamount":
		if e.complexity.Paymentdetaildata.Taxamount == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Taxamount(childComplexity), true

	case "paymentdetaildata.Taxpercent":
		if e.complexity.Paymentdetaildata.Taxpercent == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Taxpercent(childComplexity), true

	case "paymentdetaildata.Tenantid":
		if e.complexity.Paymentdetaildata.Tenantid == nil {
			break
		}

		return e.complexity.Paymentdetaildata.Tenantid(childComplexity), true

	case "promo.Address":
		if e.complexity.Promo.Address == nil {
			break
		}

		return e.complexity.Promo.Address(childComplexity), true

	case "promo.City":
		if e.complexity.Promo.City == nil {
			break
		}

		return e.complexity.Promo.City(childComplexity), true

	case "promo.Companyname":
		if e.complexity.Promo.Companyname == nil {
			break
		}

		return e.complexity.Promo.Companyname(childComplexity), true

	case "promo.Moduleid":
		if e.complexity.Promo.Moduleid == nil {
			break
		}

		return e.complexity.Promo.Moduleid(childComplexity), true

	case "promo.Packageexpiry":
		if e.complexity.Promo.Packageexpiry == nil {
			break
		}

		return e.complexity.Promo.Packageexpiry(childComplexity), true

	case "promo.Packageid":
		if e.complexity.Promo.Packageid == nil {
			break
		}

		return e.complexity.Promo.Packageid(childComplexity), true

	case "promo.Partnerid":
		if e.complexity.Promo.Partnerid == nil {
			break
		}

		return e.complexity.Promo.Partnerid(childComplexity), true

	case "promo.Postcode":
		if e.complexity.Promo.Postcode == nil {
			break
		}

		return e.complexity.Promo.Postcode(childComplexity), true

	case "promo.Promocodeid":
		if e.complexity.Promo.Promocodeid == nil {
			break
		}

		return e.complexity.Promo.Promocodeid(childComplexity), true

	case "promo.Promodescription":
		if e.complexity.Promo.Promodescription == nil {
			break
		}

		return e.complexity.Promo.Promodescription(childComplexity), true

	case "promo.Promoname":
		if e.complexity.Promo.Promoname == nil {
			break
		}

		return e.complexity.Promo.Promoname(childComplexity), true

	case "promo.Promotype":
		if e.complexity.Promo.Promotype == nil {
			break
		}

		return e.complexity.Promo.Promotype(childComplexity), true

	case "promo.Promovalue":
		if e.complexity.Promo.Promovalue == nil {
			break
		}

		return e.complexity.Promo.Promovalue(childComplexity), true

	case "promo.Validity":
		if e.complexity.Promo.Validity == nil {
			break
		}

		return e.complexity.Promo.Validity(childComplexity), true

	case "promo.Validitystatus":
		if e.complexity.Promo.Validitystatus == nil {
			break
		}

		return e.complexity.Promo.Validitystatus(childComplexity), true

	case "promotioncreateddata.code":
		if e.complexity.Promotioncreateddata.Code == nil {
			break
		}

		return e.complexity.Promotioncreateddata.Code(childComplexity), true

	case "promotioncreateddata.message":
		if e.complexity.Promotioncreateddata.Message == nil {
			break
		}

		return e.complexity.Promotioncreateddata.Message(childComplexity), true

	case "promotioncreateddata.status":
		if e.complexity.Promotioncreateddata.Status == nil {
			break
		}

		return e.complexity.Promotioncreateddata.Status(childComplexity), true

	case "promotypesdata.code":
		if e.complexity.Promotypesdata.Code == nil {
			break
		}

		return e.complexity.Promotypesdata.Code(childComplexity), true

	case "promotypesdata.message":
		if e.complexity.Promotypesdata.Message == nil {
			break
		}

		return e.complexity.Promotypesdata.Message(childComplexity), true

	case "promotypesdata.status":
		if e.complexity.Promotypesdata.Status == nil {
			break
		}

		return e.complexity.Promotypesdata.Status(childComplexity), true

	case "promotypesdata.types":
		if e.complexity.Promotypesdata.Types == nil {
			break
		}

		return e.complexity.Promotypesdata.Types(childComplexity), true

	case "result.code":
		if e.complexity.Result.Code == nil {
			break
		}

		return e.complexity.Result.Code(childComplexity), true

	case "result.message":
		if e.complexity.Result.Message == nil {
			break
		}

		return e.complexity.Result.Message(childComplexity), true

	case "result.status":
		if e.complexity.Result.Status == nil {
			break
		}

		return e.complexity.Result.Status(childComplexity), true

	case "socialinfo.dailcode":
		if e.complexity.Socialinfo.Dailcode == nil {
			break
		}

		return e.complexity.Socialinfo.Dailcode(childComplexity), true

	case "socialinfo.socialicon":
		if e.complexity.Socialinfo.Socialicon == nil {
			break
		}

		return e.complexity.Socialinfo.Socialicon(childComplexity), true

	case "socialinfo.socialid":
		if e.complexity.Socialinfo.Socialid == nil {
			break
		}

		return e.complexity.Socialinfo.Socialid(childComplexity), true

	case "socialinfo.sociallink":
		if e.complexity.Socialinfo.Sociallink == nil {
			break
		}

		return e.complexity.Socialinfo.Sociallink(childComplexity), true

	case "socialinfo.socialprofile":
		if e.complexity.Socialinfo.Socialprofile == nil {
			break
		}

		return e.complexity.Socialinfo.Socialprofile(childComplexity), true

	case "staffdetail.Locationdetails":
		if e.complexity.Staffdetail.Locationdetails == nil {
			break
		}

		return e.complexity.Staffdetail.Locationdetails(childComplexity), true

	case "staffdetail.Locationid":
		if e.complexity.Staffdetail.Locationid == nil {
			break
		}

		return e.complexity.Staffdetail.Locationid(childComplexity), true

	case "staffdetail.Staffdetailid":
		if e.complexity.Staffdetail.Staffdetailid == nil {
			break
		}

		return e.complexity.Staffdetail.Staffdetailid(childComplexity), true

	case "staffdetail.Tenanatstaffid":
		if e.complexity.Staffdetail.Tenanatstaffid == nil {
			break
		}

		return e.complexity.Staffdetail.Tenanatstaffid(childComplexity), true

	case "staffdetail.Tenantid":
		if e.complexity.Staffdetail.Tenantid == nil {
			break
		}

		return e.complexity.Staffdetail.Tenantid(childComplexity), true

	case "stafflocation.Address":
		if e.complexity.Stafflocation.Address == nil {
			break
		}

		return e.complexity.Stafflocation.Address(childComplexity), true

	case "stafflocation.City":
		if e.complexity.Stafflocation.City == nil {
			break
		}

		return e.complexity.Stafflocation.City(childComplexity), true

	case "stafflocation.Contact":
		if e.complexity.Stafflocation.Contact == nil {
			break
		}

		return e.complexity.Stafflocation.Contact(childComplexity), true

	case "stafflocation.Email":
		if e.complexity.Stafflocation.Email == nil {
			break
		}

		return e.complexity.Stafflocation.Email(childComplexity), true

	case "stafflocation.Locationid":
		if e.complexity.Stafflocation.Locationid == nil {
			break
		}

		return e.complexity.Stafflocation.Locationid(childComplexity), true

	case "stafflocation.Locationname":
		if e.complexity.Stafflocation.Locationname == nil {
			break
		}

		return e.complexity.Stafflocation.Locationname(childComplexity), true

	case "stafflocation.Postcode":
		if e.complexity.Stafflocation.Postcode == nil {
			break
		}

		return e.complexity.Stafflocation.Postcode(childComplexity), true

	case "subcat.Categoryid":
		if e.complexity.Subcat.Categoryid == nil {
			break
		}

		return e.complexity.Subcat.Categoryid(childComplexity), true

	case "subcat.Icon":
		if e.complexity.Subcat.Icon == nil {
			break
		}

		return e.complexity.Subcat.Icon(childComplexity), true

	case "subcat.Status":
		if e.complexity.Subcat.Status == nil {
			break
		}

		return e.complexity.Subcat.Status(childComplexity), true

	case "subcat.Subcategoryid":
		if e.complexity.Subcat.Subcategoryid == nil {
			break
		}

		return e.complexity.Subcat.Subcategoryid(childComplexity), true

	case "subcat.Subcategoryname":
		if e.complexity.Subcat.Subcategoryname == nil {
			break
		}

		return e.complexity.Subcat.Subcategoryname(childComplexity), true

	case "subscribedData.code":
		if e.complexity.SubscribedData.Code == nil {
			break
		}

		return e.complexity.SubscribedData.Code(childComplexity), true

	case "subscribedData.info":
		if e.complexity.SubscribedData.Info == nil {
			break
		}

		return e.complexity.SubscribedData.Info(childComplexity), true

	case "subscribedData.message":
		if e.complexity.SubscribedData.Message == nil {
			break
		}

		return e.complexity.SubscribedData.Message(childComplexity), true

	case "subscribedData.status":
		if e.complexity.SubscribedData.Status == nil {
			break
		}

		return e.complexity.SubscribedData.Status(childComplexity), true

	case "subscribedDataResponse.code":
		if e.complexity.SubscribedDataResponse.Code == nil {
			break
		}

		return e.complexity.SubscribedDataResponse.Code(childComplexity), true

	case "subscribedDataResponse.info":
		if e.complexity.SubscribedDataResponse.Info == nil {
			break
		}

		return e.complexity.SubscribedDataResponse.Info(childComplexity), true

	case "subscribedDataResponse.message":
		if e.complexity.SubscribedDataResponse.Message == nil {
			break
		}

		return e.complexity.SubscribedDataResponse.Message(childComplexity), true

	case "subscribedDataResponse.status":
		if e.complexity.SubscribedDataResponse.Status == nil {
			break
		}

		return e.complexity.SubscribedDataResponse.Status(childComplexity), true

	case "subscriptionsdata.Categoryid":
		if e.complexity.Subscriptionsdata.Categoryid == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Categoryid(childComplexity), true

	case "subscriptionsdata.Customercount":
		if e.complexity.Subscriptionsdata.Customercount == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Customercount(childComplexity), true

	case "subscriptionsdata.Featureid":
		if e.complexity.Subscriptionsdata.Featureid == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Featureid(childComplexity), true

	case "subscriptionsdata.Iconurl":
		if e.complexity.Subscriptionsdata.Iconurl == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Iconurl(childComplexity), true

	case "subscriptionsdata.Locationcount":
		if e.complexity.Subscriptionsdata.Locationcount == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Locationcount(childComplexity), true

	case "subscriptionsdata.LogoUrl":
		if e.complexity.Subscriptionsdata.LogoURL == nil {
			break
		}

		return e.complexity.Subscriptionsdata.LogoURL(childComplexity), true

	case "subscriptionsdata.Moduleid":
		if e.complexity.Subscriptionsdata.Moduleid == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Moduleid(childComplexity), true

	case "subscriptionsdata.Modulename":
		if e.complexity.Subscriptionsdata.Modulename == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Modulename(childComplexity), true

	case "subscriptionsdata.PackageAmount":
		if e.complexity.Subscriptionsdata.PackageAmount == nil {
			break
		}

		return e.complexity.Subscriptionsdata.PackageAmount(childComplexity), true

	case "subscriptionsdata.PackageIcon":
		if e.complexity.Subscriptionsdata.PackageIcon == nil {
			break
		}

		return e.complexity.Subscriptionsdata.PackageIcon(childComplexity), true

	case "subscriptionsdata.Packageid":
		if e.complexity.Subscriptionsdata.Packageid == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Packageid(childComplexity), true

	case "subscriptionsdata.Packagename":
		if e.complexity.Subscriptionsdata.Packagename == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Packagename(childComplexity), true

	case "subscriptionsdata.Paymentstatus":
		if e.complexity.Subscriptionsdata.Paymentstatus == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Paymentstatus(childComplexity), true

	case "subscriptionsdata.Subcategoryid":
		if e.complexity.Subscriptionsdata.Subcategoryid == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Subcategoryid(childComplexity), true

	case "subscriptionsdata.Subscriptionaccid":
		if e.complexity.Subscriptionsdata.Subscriptionaccid == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Subscriptionaccid(childComplexity), true

	case "subscriptionsdata.Subscriptionid":
		if e.complexity.Subscriptionsdata.Subscriptionid == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Subscriptionid(childComplexity), true

	case "subscriptionsdata.Subscriptionmethodid":
		if e.complexity.Subscriptionsdata.Subscriptionmethodid == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Subscriptionmethodid(childComplexity), true

	case "subscriptionsdata.Taxamount":
		if e.complexity.Subscriptionsdata.Taxamount == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Taxamount(childComplexity), true

	case "subscriptionsdata.Tenantaccid":
		if e.complexity.Subscriptionsdata.Tenantaccid == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Tenantaccid(childComplexity), true

	case "subscriptionsdata.Tenantid":
		if e.complexity.Subscriptionsdata.Tenantid == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Tenantid(childComplexity), true

	case "subscriptionsdata.TotalAmount":
		if e.complexity.Subscriptionsdata.TotalAmount == nil {
			break
		}

		return e.complexity.Subscriptionsdata.TotalAmount(childComplexity), true

	case "subscriptionsdata.Validity":
		if e.complexity.Subscriptionsdata.Validity == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Validity(childComplexity), true

	case "subscriptionsdata.Validitydate":
		if e.complexity.Subscriptionsdata.Validitydate == nil {
			break
		}

		return e.complexity.Subscriptionsdata.Validitydate(childComplexity), true

	case "tenantsubcat.Categoryid":
		if e.complexity.Tenantsubcat.Categoryid == nil {
			break
		}

		return e.complexity.Tenantsubcat.Categoryid(childComplexity), true

	case "tenantsubcat.Categoryname":
		if e.complexity.Tenantsubcat.Categoryname == nil {
			break
		}

		return e.complexity.Tenantsubcat.Categoryname(childComplexity), true

	case "tenantsubcat.Icon":
		if e.complexity.Tenantsubcat.Icon == nil {
			break
		}

		return e.complexity.Tenantsubcat.Icon(childComplexity), true

	case "tenantsubcat.Selected":
		if e.complexity.Tenantsubcat.Selected == nil {
			break
		}

		return e.complexity.Tenantsubcat.Selected(childComplexity), true

	case "tenantsubcat.Subcategoryid":
		if e.complexity.Tenantsubcat.Subcategoryid == nil {
			break
		}

		return e.complexity.Tenantsubcat.Subcategoryid(childComplexity), true

	case "tenantsubcat.Subcategoryname":
		if e.complexity.Tenantsubcat.Subcategoryname == nil {
			break
		}

		return e.complexity.Tenantsubcat.Subcategoryname(childComplexity), true

	case "tenantupdatedata.code":
		if e.complexity.Tenantupdatedata.Code == nil {
			break
		}

		return e.complexity.Tenantupdatedata.Code(childComplexity), true

	case "tenantupdatedata.message":
		if e.complexity.Tenantupdatedata.Message == nil {
			break
		}

		return e.complexity.Tenantupdatedata.Message(childComplexity), true

	case "tenantupdatedata.status":
		if e.complexity.Tenantupdatedata.Status == nil {
			break
		}

		return e.complexity.Tenantupdatedata.Status(childComplexity), true

	case "tenantupdatedata.updated":
		if e.complexity.Tenantupdatedata.Updated == nil {
			break
		}

		return e.complexity.Tenantupdatedata.Updated(childComplexity), true

	case "tenantuserdata.code":
		if e.complexity.Tenantuserdata.Code == nil {
			break
		}

		return e.complexity.Tenantuserdata.Code(childComplexity), true

	case "tenantuserdata.message":
		if e.complexity.Tenantuserdata.Message == nil {
			break
		}

		return e.complexity.Tenantuserdata.Message(childComplexity), true

	case "tenantuserdata.status":
		if e.complexity.Tenantuserdata.Status == nil {
			break
		}

		return e.complexity.Tenantuserdata.Status(childComplexity), true

	case "tenantuserdata.tenantuser":
		if e.complexity.Tenantuserdata.Tenantuser == nil {
			break
		}

		return e.complexity.Tenantuserdata.Tenantuser(childComplexity), true

	case "typedata.Promotiontypeid":
		if e.complexity.Typedata.Promotiontypeid == nil {
			break
		}

		return e.complexity.Typedata.Promotiontypeid(childComplexity), true

	case "typedata.Tag":
		if e.complexity.Typedata.Tag == nil {
			break
		}

		return e.complexity.Typedata.Tag(childComplexity), true

	case "typedata.Typename":
		if e.complexity.Typedata.Typename == nil {
			break
		}

		return e.complexity.Typedata.Typename(childComplexity), true

	case "user.userid":
		if e.complexity.User.Userid == nil {
			break
		}

		return e.complexity.User.Userid(childComplexity), true

	case "userfromtenant.Contact":
		if e.complexity.Userfromtenant.Contact == nil {
			break
		}

		return e.complexity.Userfromtenant.Contact(childComplexity), true

	case "userfromtenant.Email":
		if e.complexity.Userfromtenant.Email == nil {
			break
		}

		return e.complexity.Userfromtenant.Email(childComplexity), true

	case "userfromtenant.Firstname":
		if e.complexity.Userfromtenant.Firstname == nil {
			break
		}

		return e.complexity.Userfromtenant.Firstname(childComplexity), true

	case "userfromtenant.Lastname":
		if e.complexity.Userfromtenant.Lastname == nil {
			break
		}

		return e.complexity.Userfromtenant.Lastname(childComplexity), true

	case "userfromtenant.Locationid":
		if e.complexity.Userfromtenant.Locationid == nil {
			break
		}

		return e.complexity.Userfromtenant.Locationid(childComplexity), true

	case "userfromtenant.Locationname":
		if e.complexity.Userfromtenant.Locationname == nil {
			break
		}

		return e.complexity.Userfromtenant.Locationname(childComplexity), true

	case "userfromtenant.Profileimage":
		if e.complexity.Userfromtenant.Profileimage == nil {
			break
		}

		return e.complexity.Userfromtenant.Profileimage(childComplexity), true

	case "userfromtenant.Tenantid":
		if e.complexity.Userfromtenant.Tenantid == nil {
			break
		}

		return e.complexity.Userfromtenant.Tenantid(childComplexity), true

	case "userfromtenant.Userid":
		if e.complexity.Userfromtenant.Userid == nil {
			break
		}

		return e.complexity.Userfromtenant.Userid(childComplexity), true

	case "userinfodata.Contact":
		if e.complexity.Userinfodata.Contact == nil {
			break
		}

		return e.complexity.Userinfodata.Contact(childComplexity), true

	case "userinfodata.Email":
		if e.complexity.Userinfodata.Email == nil {
			break
		}

		return e.complexity.Userinfodata.Email(childComplexity), true

	case "userinfodata.Firstname":
		if e.complexity.Userinfodata.Firstname == nil {
			break
		}

		return e.complexity.Userinfodata.Firstname(childComplexity), true

	case "userinfodata.Lastname":
		if e.complexity.Userinfodata.Lastname == nil {
			break
		}

		return e.complexity.Userinfodata.Lastname(childComplexity), true

	case "userinfodata.Locationid":
		if e.complexity.Userinfodata.Locationid == nil {
			break
		}

		return e.complexity.Userinfodata.Locationid(childComplexity), true

	case "userinfodata.Profileid":
		if e.complexity.Userinfodata.Profileid == nil {
			break
		}

		return e.complexity.Userinfodata.Profileid(childComplexity), true

	case "userinfodata.Profileimage":
		if e.complexity.Userinfodata.Profileimage == nil {
			break
		}

		return e.complexity.Userinfodata.Profileimage(childComplexity), true

	case "userinfodata.Userid":
		if e.complexity.Userinfodata.Userid == nil {
			break
		}

		return e.complexity.Userinfodata.Userid(childComplexity), true

	case "userlist.Moduleid":
		if e.complexity.Userlist.Moduleid == nil {
			break
		}

		return e.complexity.Userlist.Moduleid(childComplexity), true

	case "userlist.Tenantid":
		if e.complexity.Userlist.Tenantid == nil {
			break
		}

		return e.complexity.Userlist.Tenantid(childComplexity), true

	case "userlist.Tenantstaffid":
		if e.complexity.Userlist.Tenantstaffid == nil {
			break
		}

		return e.complexity.Userlist.Tenantstaffid(childComplexity), true

	case "userlist.Userid":
		if e.complexity.Userlist.Userid == nil {
			break
		}

		return e.complexity.Userlist.Userid(childComplexity), true

	case "userlist.Userinfo":
		if e.complexity.Userlist.Userinfo == nil {
			break
		}

		return e.complexity.Userlist.Userinfo(childComplexity), true

	case "usersdata.code":
		if e.complexity.Usersdata.Code == nil {
			break
		}

		return e.complexity.Usersdata.Code(childComplexity), true

	case "usersdata.message":
		if e.complexity.Usersdata.Message == nil {
			break
		}

		return e.complexity.Usersdata.Message(childComplexity), true

	case "usersdata.status":
		if e.complexity.Usersdata.Status == nil {
			break
		}

		return e.complexity.Usersdata.Status(childComplexity), true

	case "usersdata.users":
		if e.complexity.Usersdata.Users == nil {
			break
		}

		return e.complexity.Usersdata.Users(childComplexity), true

	case "usertenant.Locationid":
		if e.complexity.Usertenant.Locationid == nil {
			break
		}

		return e.complexity.Usertenant.Locationid(childComplexity), true

	case "usertenant.Staffdetailid":
		if e.complexity.Usertenant.Staffdetailid == nil {
			break
		}

		return e.complexity.Usertenant.Staffdetailid(childComplexity), true

	case "usertenant.Tenanatstaffid":
		if e.complexity.Usertenant.Tenanatstaffid == nil {
			break
		}

		return e.complexity.Usertenant.Tenanatstaffid(childComplexity), true

	case "usertenant.Tenantid":
		if e.complexity.Usertenant.Tenantid == nil {
			break
		}

		return e.complexity.Usertenant.Tenantid(childComplexity), true

	case "usertenant.Tenantusers":
		if e.complexity.Usertenant.Tenantusers == nil {
			break
		}

		return e.complexity.Usertenant.Tenantusers(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Category {
 Categoryid: Int!
 Name: String!
 Type: Int!
 SortOrder: Int!
 Status:String!
}
type Cat {
 Categoryid: Int!
 Categoryname: String!
 Categorytype: Int!
 Sortorder: Int!
 Status:String!
}
type SubCategory{
 CategoryId: Int!
 SubCategoryId: Int!
 Name: String!
 Type: Int!
 SortOrder: Int!
 Status:String!
 Icon:String!

}
type Module{
 ModuleId:Int!
 CategoryId: Int!
 Name: String!
 Content: String!
 ImageUrl: String!
 LogoUrl: String!
}
type Sparkle{
 category:[Cat]!
 subcategory:[subcat]!
 package:[Package]!

}
type Package{
 ModuleId:Int! 
 Modulename:String!
 Name: String!
 PackageId:Int!
 Status:String!
 PackageAmount:String!
 PaymentMode:String! 
 PackageContent:String!
 PackageIcon: String!
 Promocodeid:Int!
 Promonname:String!
 Promodescription:String!
 Promotype:String!
 Promovalue:Float!
 Packageexpiry:Int!
 Validitydate:String!
 Validity:Boolean!


}
input TenantDetails{
 Name:String!
 Regno:String!
 Email:String!
 Mobile:String!
 Type: Int!
 Tenanttoken:String!
}
input TenantAddress{
 Address:String!
 Suburb:String!
 City:String!
 State:String!
 Zip:String!
 Countrycode:String!
 Currencyid:Int!
 Currencycode:String!
 Currencysymbol:String!
 Latitude:String!
 Longitude:String!
 TimeZone:String!
 Opentime:String!
 Closetime:String!
}
type TenantData{
 Tenantid:Int!
 Tenantname:String!
 Moduleid:Int! 
 Featureid:Int!
 Modulename:String!
 Subscriptionid:Int!
 Tenantaccid:String!
 Locationid:Int!
 Locationname:String!
 Categoryid:Int!
 Subcategoryid:Int!
 Taxamount:Float!
 Totalamount:Float!
}
type subscribedData{
 status:Boolean!
 code:Int!
 message:String!
 info:[TenantData]!
}
type subscribedDataResponse{
 status:Boolean!
 code:Int!
 message:String!
 info:TenantData
}
input subscription{
 TransactionDate:String!
 PackageId:Int!
 ModuleId:Int!
 Featureid:Int!
 CurrencyId:Int!
 CurrencyCode:String!
 Price:String!
 TaxId:Int!
 Quantity:Int!
 Promoid:Int!
 Promovalue:String!
 TaxAmount:String!
 TotalAmount:String!
 PaymentStatus:Int!
 PaymentId:Int
 Validitydate:String!
}

input initialsubscribe{
TransactionDate:String!
 Packageid:Int!
 Partnerid:Int!
 Moduleid:Int!
 Featureid:Int!
 Categoryid: Int!
 SubCategoryid: Int!
 Subcategoryname:String!
 Currencyid:Int!
 CurrencyCode:String!
 Price:String!
 TaxId:Int!
 Quantity:Int!
 Promoid:Int!
 Promovalue:String!
 TaxAmount:String!
 TotalAmount:String!
 PaymentStatus:Int!
 Paymentid:Int
 Validitydate:String!
}
input subscriptionnew{
   Tenantid:Int!
TransactionDate:String!
 Packageid:Int!
 Partnerid:Int!
 Moduleid:Int!
 Featureid:Int!
  CategoryId: Int!
 SubCategoryId: Int!
 Subcategoryname:String!
 Currencyid:Int!
 CurrencyCode:String!
 Price:String!
 TaxId:Int!
 Quantity:Int!
 Promoid:Int!
 Promovalue:String!
 TaxAmount:String!
 TotalAmount:String!
 PaymentStatus:Int!
 Paymentid:Int
 Validitydate:String!
}

input tenantuser{
 Tenantid:Int!
 Moduleid:Int!
 firstname: String!
 lastname:String!
 mobile:String!
 email:String!
 profileimage:String!
 locationid:Int!
 roleid:Int!
 configid:Int!
}
input data{
 tenantinfo:TenantDetails
 tenantlocation:TenantAddress
 subscriptiondetails:[initialsubscribe]
}
input location{
 TenantId:Int!
 LocationName:String!
 Email:String!
 Contact:String!
 Address:String!
 Suburb:String!
  City:String!
 State:String!
 Zip:String!
 Countrycode:String!
 Latitude:String!
 Longitude:String!
 Openingtime:String!
 Closingtime:String!
 Delivery:Boolean!
 Deliverytype:String!
 Deliverymins:Int!

}
input subscribemoreinput{
Subscriptionid:Int!
 Tenantid:Int!
 Featureid:Int!
TransactionDate:String!
 Partnerid:Int!
 Currencyid:Int!
 Price:String!
 TaxId:Int!
 Quantity:Int!
 Promoid:Int!
 Promovalue:String!
 TaxAmount:String!
 TotalAmount:String!
 PaymentStatus:Int!
 Paymentid:Int
 Validitydate:String!
}
input locationupdate{
Locationid:Int!
 TenantId:Int!
 LocationName:String!
 Email:String!
 Contact:String!
 Address:String!
 Suburb:String!
 City:String!
 State:String!
 Zip:String!
 Countrycode:String!
 Latitude:String!
 Longitude:String!
 Openingtime:String!
 Closingtime:String!
 Delivery:Boolean!
 Deliverytype:String!
 Deliverymins:Int!

}
input chargecreate{
deliverycharges:[deliverychargeinput]
othercharges:[chargecreateinput]

}
input chargecreateinput{
Tenantid:Int!
Locationid:Int!
Chargeid:Int!
Chargename:String!
Chargetype:String!
Chargevalue:String!
}
input chargeupdateinput{
Tenantchargeid:Int!
Tenantid:Int!
Locationid:Int!
Chargeid:Int!
Chargename:String!
Chargetype:String!
Chargevalue:String!
}
input deliverychargeinput{
Tenantid:Int!
Locationid:Int!  
Slabtype:String!
Slab:String!
Slablimit:Int!
Slabcharge:String!
}
input updatedeliverychargeinput{
Settingsid:Int!
Tenantid:Int!
Locationid:Int!  
Slabtype:String!
Slab:String!
Slablimit:Int!
Slabcharge:String!
}
input chargeupdate{
updatedeliverycharges:updatedelivery
updateothercharges:updateother
}
input updatedelivery{
   create:[deliverychargeinput]
   update:[updatedeliverychargeinput]
   delete:[Int]
}
input updateother{
create:[chargecreateinput]
update:[chargeupdateinput]
delete:[Int]
}
input locationstatusinput{
 
  locationstatus:[locstatus]
  deliverystatus:[delstatus]
}
input locstatus{
 tenantid:Int!
 locationid:Int!
 status:String!
}
input delstatus{
 tenantid:Int!
 locationid:Int!
 delivery:Boolean!
}
input subcatinsertdata{
Tenantid:Int! 
Moduleid:Int!
Categoryid:Int!
Subcategoryid:Int! 
Subcategoryname:String! 
}
input updateinfo{
Tenantid:Int!
Locationid:Int!
 Brandname:String!
 About:String!
 Tenantimage:String!
 Openingtime:String!
 Closingtime:String!

}
type LocationInfo{
 Locationid:Int!
 LocationName:String!
 status:String!
 createdby:Int!
}
type locationdata{
 status:Boolean!
 code:Int!
 message:String!
 locationinfo:LocationInfo!
}
type locationgetall {
 locationid:Int!
 locationName:String!
 tenantid:Int!
 email:String!
 contact:String!
 address:String!
 suburb:String!
 city:String!
 state:String!
 postcode:String!
 countycode:String!
 latitude:String!
 longitude:String!
 openingtime:String!
 closingtime:String!
 delivery:Boolean!
 deliverytype:String!
 deliverymins:Int!
 status:String!
 createdby:Int!
 tenantusers:[userinfodata]
 othercharges:[othercharge]
 deliverycharges:[deliverycharge]
}
type othercharge{
Tenantchargeid:Int!
Tenantid:Int!
Locationid:Int!
Chargeid:Int!
Chargename:String!
Chargetype:String!
Chargevalue:String!
}
type deliverycharge{
   Settingsid:Int!
Tenantid:Int!
Locationid:Int!  
Slabtype:String!
Slab:String!
Slablimit:Int!
Slabcharge:String!
}
type usertenant{
Staffdetailid:Int!
Tenanatstaffid:Int!
Tenantid:Int!
Locationid:Int!
Tenantusers:[userlist]
}
type userlist{
Tenantstaffid:Int!
Tenantid:Int!
Moduleid:Int!
Userid:Int!
Userinfo:userinfodata
}
type userinfodata{
Profileid:Int!
Userid:Int!
Locationid:Int!
Firstname:String!
Lastname:String!
Email:String!
Contact:String!
Profileimage:String!
}
type getalllocations{
 status:Boolean!
 code:Int!
 message:String!
 locations:[locationgetall]
}
type user{
 userid:Int!
}
type tenantuserdata{
 status:Boolean!
 code:Int!
 message:String!
 tenantuser:user!
}
type usersdata{
 status:Boolean!
 code:Int!
 message:String!
 users:[userfromtenant]
}
type userfromtenant{
Tenantid:Int!
Userid:Int!
Firstname:String!
Lastname:String!
Email:String!
Contact:String!
Profileimage:String!
Locationid:Int!
Locationname:String!

 
}
type staffdetail{
Staffdetailid:Int!
Tenanatstaffid:Int!
Tenantid:Int!
Locationid:Int!
Locationdetails:stafflocation
}
type stafflocation{
Locationid:Int!
Locationname:String!
Email:String!
Contact:String!
Address:String!
City:String!
Postcode:String!
}



input updatetenant{

 userid: Int! 
 tenantid:Int!
 moduleid:Int!
 locationid:Int!
 firstname: String!
 lastname:String!
 mobile:String!
 email:String!
 profileimage:String!

}
type tenantupdatedata{
 status:Boolean!
 code:Int!
 message:String!
 updated:Int!
}
input businessupdatedata{
 tenantid:Int!
 brandname:String
 about:String
 cod:Int
 digital:Int

 tenantimage:String!
}
input socialupdatedata{
socialid:Int
 socialprofile:String
 dailcode:String
 sociallink:String
 socialicon:String
}
input socialadddata{

 socialprofile:String
 dailcode:String
 sociallink:String
 socialicon:String
}
input business{
 businessupdate:businessupdatedata
 socialadd:[socialadddata]
 socialupdate:[socialupdatedata]
 socialdelete:[Int]
}
type businessdata{
 status:Boolean!
 code:Int!
 message:String!
 updated:Int!
}
type getBusinessdata{
 status:Boolean!
 code:Int!
 message:String!
 businessinfo:info
}
type info{
 tenantid:Int!
 moduleid:Int!
 modulename:String!
 brandname:String
 about:String
 email:String
 phone:String
 address:String
 cod:Int
 digital:Int
 tenantaccid:String
 tenanttoken:String
 tenantimage:String
 countrycode:String!
 currencycode:String!
 currencysymbol:String!
 social:[socialinfo]
}
type socialinfo{
socialid:Int!
 socialprofile:String!
 dailcode:String!
 sociallink:String!
 socialicon:String!
}
type Promotion {
 PromotionId: Int!
 Promotiontypeid:Int!
 Promotionname: String!
 Tenantid:Int!
 Tenantame: String!
 Promocode:String!
 Promoterms:String!
 Promovalue:String!
 Promotag: String!
Promotype:String!
 Startdate:String!
 Enddate: String!
 Broadstatus:Boolean!
 Success:Int!
 Failure:Int!
 Status:String
}

type getpromotiondata{
 status:Boolean!
 code:Int!
 message:String!   
 promotions:[Promotion]
}
type promotioncreateddata{
 status:Boolean!
 code:Int!
 message:String!     
}
input promoinput{
 Promotiontypeid:Int!
 Promotionname: String
 Tenantid:Int!  
 Promocode:String
 Promoterms:String
 Promovalue:String
 Startdate:String
 Enddate: String 
}
type promotypesdata{
 status:Boolean!
 code:Int!
 message:String! 
 types:[typedata]    
}
type typedata{
   Promotiontypeid:Int!  
   Typename:String
   Tag:String
}
type chargetypedata{
status:Boolean!
 code:Int!
 message:String! 
 types:[chargetype]
}
type chargetype{
 Chargeid:Int!
 Chargename:String!
 Status:String
}
type locationbyiddata{
status:Boolean!
 code:Int!
 message:String! 
 locationdata:locationgetall

}
type getpaymentdata{
status:Boolean!
code:Int!
message:String!   
payments:[paymentdata] 
}
type paymentdata{
Paymentid:Int!
Moduleid:Int!
Locationid:Int!
Tenantid:Int!
Paymentref:String!
Paymenttypeid:Int!
Customerid:Int!
Transactiondate:String!
Orderid:Int!
Chargeid:String!
Amount:Float!
Refundamt:Float!
Paymentstatus:String!
Created:String!
Paymentdetails:[paymentdetaildata]

}
type paymentdetaildata{
Paymentdetailid:Int!
Paymentid:Int!
Moduleid:Int!
Locationid:Int!
Tenantid:Int!
Orderid:Int!
Subscriptionid:Int!
Amount:Float!
Taxpercent:Int!
Taxamount:Float!
Payamount:Float!
Customerinfo:Custinfo
}
type Custinfo{
   Customerid:Int!
   Firstname:String!
   Lastname:String!
   Email:String!
   Contact:String!
   Address:String!
}
type getsubscriptionsdata{
  status:Boolean!
code:Int!
message:String! 
subscribed:[subscriptionsdata]  
}
type subscriptionsdata{
Subscriptionid:Int!
Packageid:Int
Moduleid:Int!
Featureid:Int!
Tenantid:Int!
Categoryid:Int!
Subcategoryid:Int!
Validitydate:String!
Validity:Boolean!
Modulename:String!
Subscriptionaccid:String!
Subscriptionmethodid:String!
Paymentstatus:Boolean!
Packagename:String
LogoUrl:String!
Iconurl:String!
PackageIcon:String
PackageAmount:Float
TotalAmount:Float!
Taxamount:Float!
Tenantaccid:String!
Customercount:Int
Locationcount:Int

}
type getnonsubscribeddata{
status:Boolean!
code:Int!
message:String!  
 nonsubscribed:[Package]
}
type getallmoduledata{
 status:Boolean!
code:Int!
message:String! 
modules:[mod]  
}
type mod{
 Moduleid:Int!
	Categoryid:Int!
   Subcategoryid:Int!
   Subcategoryname:String!
	Modulename:String!
   Baseprice:String!
   Taxpercent:Int!
   Taxamount:String!
   Amount:String!
	Content:String!
	Logourl:String!
	Iconurl:String!
}
type getallpromodata{
  status:Boolean!
code:Int!
message:String! 
promos:[promo]  
}
type promo{
Promocodeid:Int!
Moduleid:Int!
Partnerid:Int!
Packageid:Int!
Promoname:String!
Promodescription:String!
Packageexpiry:String!
Promotype:String!
Promovalue:String!
Validity:String!
Validitystatus:Boolean!
Companyname:String!
Address:String!
City:String!
Postcode:String!
}
type getsubcategorydata{
status:Boolean!
code:Int!
message:String! 
subcategories:[subcat]   
}
type subcat{
   Subcategoryname:String!
   Subcategoryid:Int!
   Categoryid:Int!
   Status:String!
   Icon:String!
}
type gettenantsubcategorydata{
status:Boolean!
code:Int!
message:String!   
tenantsubcategories:[tenantsubcat]
}
type tenantsubcat{
   Categoryid:Int!
   Subcategoryid:Int!
  Subcategoryname:String!
  Icon:String!
  Selected:Int!
  Categoryname:String!
}
type getnonsubscribedcategorydata {
status:Boolean!
code:Int!
message:String! 
category:[Cat]
}
type result{
 status:Boolean!
code:Int!
message:String!   
}
type Tenantschema{
 Tenantid:Int!
 Moduleid:Int!
 Modulename:String!
 brandname:String
 about:String
 email:String
 phone:String
 address:String
 cod:Int
 digital:Int
 tenantaccid:String
 tenanttoken:String
 tenantimage:String
}


type Query {
 sparkle: Sparkle!
 location(tenantid:Int!):getalllocations
 tenantusers(tenantid:Int!,userid:Int!):usersdata
 getBusiness(tenantid:Int!,categoryid:Int!):getBusinessdata
 getpromotions(tenantid:Int!):getpromotiondata
 getpromotypes:promotypesdata
 getchargetypes:chargetypedata
 getlocationbyid(tenantid:Int!,locationid:Int!):locationbyiddata
 getpayments(tenantid:Int!,typeid:Int!):getpaymentdata
 getsubscriptions(tenantid:Int!):getsubscriptionsdata
 getnonsubscribed(tenantid:Int!):getnonsubscribeddata
 getallmodule(categoryid:Int!,tenantid:Int!,mode:Boolean!):getallmoduledata
 getallpromos(moduleid:Int!):getallpromodata
 getsubcategorybyid(categoryid:Int!): getsubcategorydata
 gettenantsubcategory(tenantid:Int!,categoryid:Int!,moduleid:Int!):gettenantsubcategorydata
 getnonsubscribedcategory(tenantid:Int!):getnonsubscribedcategorydata
 gettenantinfo(tenantid:Int!):result
}

type Mutation {
 subscribe(input: data!): subscribedData
 createtenantuser(create:tenantuser):tenantuserdata
 updatetenantuser(update:updatetenant):tenantupdatedata
 updatetenantbusiness(businessinfo:business):businessdata
 createlocation(input:location):locationdata
 createpromotion(input:promoinput):promotioncreateddata
 createcharges(input:chargecreate):promotioncreateddata
 updatecharges(input:chargeupdate):promotioncreateddata
 updatelocationstatus(input:locationstatusinput):promotioncreateddata
 updatelocation(input:locationupdate):promotioncreateddata
 subscription(input:[subscriptionnew]):subscribedData
 initialupdate(input:updateinfo):promotioncreateddata
 insertsubcategory(input:[subcatinsertdata]):promotioncreateddata
 subscribemore(input:[subscribemoreinput]):subscribedData
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createcharges_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Chargecreate
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOchargecreate2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargecreate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createlocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Location
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOlocation2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createpromotion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Promoinput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOpromoinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromoinput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createtenantuser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Tenantuser
	if tmp, ok := rawArgs["create"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
		arg0, err = ec.unmarshalOtenantuser2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantuser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["create"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_initialupdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Updateinfo
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOupdateinfo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdateinfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insertsubcategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Subcatinsertdata
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOsubcatinsertdata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcatinsertdata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_subscribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Data
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNdata2githubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐData(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_subscribemore_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Subscribemoreinput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOsubscribemoreinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscribemoreinput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_subscription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.Subscriptionnew
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOsubscriptionnew2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscriptionnew(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatecharges_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Chargeupdate
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOchargeupdate2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargeupdate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatelocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Locationupdate
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOlocationupdate2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationupdate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatelocationstatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Locationstatusinput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOlocationstatusinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationstatusinput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatetenantbusiness_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Business
	if tmp, ok := rawArgs["businessinfo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessinfo"))
		arg0, err = ec.unmarshalObusiness2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐBusiness(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["businessinfo"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatetenantuser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Updatetenant
	if tmp, ok := rawArgs["update"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
		arg0, err = ec.unmarshalOupdatetenant2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdatetenant(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["update"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusiness_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["categoryid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryid"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryid"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getallmodule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["categoryid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryid"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["mode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getallpromos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["moduleid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moduleid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getlocationbyid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["locationid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationid"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locationid"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getnonsubscribed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getnonsubscribedcategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getpayments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["typeid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeid"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["typeid"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getpromotions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getsubcategorybyid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["categoryid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getsubscriptions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_gettenantinfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_gettenantsubcategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["categoryid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryid"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryid"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["moduleid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleid"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moduleid"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_location_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tenantusers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["tenantid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenantid"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["userid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userid"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userid"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Cat_Categoryid(ctx context.Context, field graphql.CollectedField, obj *model.Cat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Cat_Categoryname(ctx context.Context, field graphql.CollectedField, obj *model.Cat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoryname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cat_Categorytype(ctx context.Context, field graphql.CollectedField, obj *model.Cat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categorytype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Cat_Sortorder(ctx context.Context, field graphql.CollectedField, obj *model.Cat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sortorder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Cat_Status(ctx context.Context, field graphql.CollectedField, obj *model.Cat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Category_Categoryid(ctx context.Context, field graphql.CollectedField, obj *model.Category) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Category_Name(ctx context.Context, field graphql.CollectedField, obj *model.Category) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Category_Type(ctx context.Context, field graphql.CollectedField, obj *model.Category) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Category_SortOrder(ctx context.Context, field graphql.CollectedField, obj *model.Category) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Category_Status(ctx context.Context, field graphql.CollectedField, obj *model.Category) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Custinfo_Customerid(ctx context.Context, field graphql.CollectedField, obj *model.Custinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Custinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customerid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Custinfo_Firstname(ctx context.Context, field graphql.CollectedField, obj *model.Custinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Custinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Custinfo_Lastname(ctx context.Context, field graphql.CollectedField, obj *model.Custinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Custinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Custinfo_Email(ctx context.Context, field graphql.CollectedField, obj *model.Custinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Custinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Custinfo_Contact(ctx context.Context, field graphql.CollectedField, obj *model.Custinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Custinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Custinfo_Address(ctx context.Context, field graphql.CollectedField, obj *model.Custinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Custinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LocationInfo_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.LocationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LocationInfo_LocationName(ctx context.Context, field graphql.CollectedField, obj *model.LocationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LocationInfo_status(ctx context.Context, field graphql.CollectedField, obj *model.LocationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LocationInfo_createdby(ctx context.Context, field graphql.CollectedField, obj *model.LocationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Createdby, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Module_ModuleId(ctx context.Context, field graphql.CollectedField, obj *model.Module) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Module",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Module_CategoryId(ctx context.Context, field graphql.CollectedField, obj *model.Module) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Module",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Module_Name(ctx context.Context, field graphql.CollectedField, obj *model.Module) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Module",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Module_Content(ctx context.Context, field graphql.CollectedField, obj *model.Module) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Module",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Module_ImageUrl(ctx context.Context, field graphql.CollectedField, obj *model.Module) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Module",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Module_LogoUrl(ctx context.Context, field graphql.CollectedField, obj *model.Module) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Module",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_subscribe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_subscribe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Subscribe(rctx, args["input"].(model.Data))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscribedData)
	fc.Result = res
	return ec.marshalOsubscribedData2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscribedData(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createtenantuser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createtenantuser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Createtenantuser(rctx, args["create"].(*model.Tenantuser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tenantuserdata)
	fc.Result = res
	return ec.marshalOtenantuserdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantuserdata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatetenantuser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatetenantuser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Updatetenantuser(rctx, args["update"].(*model.Updatetenant))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tenantupdatedata)
	fc.Result = res
	return ec.marshalOtenantupdatedata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantupdatedata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatetenantbusiness(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatetenantbusiness_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Updatetenantbusiness(rctx, args["businessinfo"].(*model.Business))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Businessdata)
	fc.Result = res
	return ec.marshalObusinessdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐBusinessdata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createlocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createlocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Createlocation(rctx, args["input"].(*model.Location))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Locationdata)
	fc.Result = res
	return ec.marshalOlocationdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationdata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createpromotion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createpromotion_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Createpromotion(rctx, args["input"].(*model.Promoinput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Promotioncreateddata)
	fc.Result = res
	return ec.marshalOpromotioncreateddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotioncreateddata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createcharges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createcharges_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Createcharges(rctx, args["input"].(*model.Chargecreate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Promotioncreateddata)
	fc.Result = res
	return ec.marshalOpromotioncreateddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotioncreateddata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatecharges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatecharges_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Updatecharges(rctx, args["input"].(*model.Chargeupdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Promotioncreateddata)
	fc.Result = res
	return ec.marshalOpromotioncreateddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotioncreateddata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatelocationstatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatelocationstatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Updatelocationstatus(rctx, args["input"].(*model.Locationstatusinput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Promotioncreateddata)
	fc.Result = res
	return ec.marshalOpromotioncreateddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotioncreateddata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatelocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatelocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Updatelocation(rctx, args["input"].(*model.Locationupdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Promotioncreateddata)
	fc.Result = res
	return ec.marshalOpromotioncreateddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotioncreateddata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_subscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_subscription_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Subscription(rctx, args["input"].([]*model.Subscriptionnew))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscribedData)
	fc.Result = res
	return ec.marshalOsubscribedData2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscribedData(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_initialupdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_initialupdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Initialupdate(rctx, args["input"].(*model.Updateinfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Promotioncreateddata)
	fc.Result = res
	return ec.marshalOpromotioncreateddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotioncreateddata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insertsubcategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insertsubcategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Insertsubcategory(rctx, args["input"].([]*model.Subcatinsertdata))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Promotioncreateddata)
	fc.Result = res
	return ec.marshalOpromotioncreateddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotioncreateddata(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_subscribemore(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_subscribemore_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Subscribemore(rctx, args["input"].([]*model.Subscribemoreinput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubscribedData)
	fc.Result = res
	return ec.marshalOsubscribedData2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscribedData(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_ModuleId(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Modulename(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modulename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Name(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_PackageId(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Status(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_PackageAmount(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_PaymentMode(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_PackageContent(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_PackageIcon(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageIcon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Promocodeid(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promocodeid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Promonname(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promonname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Promodescription(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promodescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Promotype(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Promovalue(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promovalue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Packageexpiry(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Packageexpiry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Validitydate(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validitydate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Package_Validity(ctx context.Context, field graphql.CollectedField, obj *model.Package) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Package",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_PromotionId(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromotionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Promotiontypeid(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotiontypeid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Promotionname(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotionname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Tenantame(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantame, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Promocode(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promocode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Promoterms(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promoterms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Promovalue(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promovalue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Promotag(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Promotype(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Startdate(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Startdate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Enddate(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enddate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Broadstatus(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Broadstatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Success(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Failure(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Failure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Promotion_Status(ctx context.Context, field graphql.CollectedField, obj *model.Promotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Promotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_sparkle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Sparkle(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Sparkle)
	fc.Result = res
	return ec.marshalNSparkle2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSparkle(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_location(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_location_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Location(rctx, args["tenantid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Getalllocations)
	fc.Result = res
	return ec.marshalOgetalllocations2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetalllocations(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_tenantusers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_tenantusers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tenantusers(rctx, args["tenantid"].(int), args["userid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Usersdata)
	fc.Result = res
	return ec.marshalOusersdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUsersdata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusiness(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusiness_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusiness(rctx, args["tenantid"].(int), args["categoryid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetBusinessdata)
	fc.Result = res
	return ec.marshalOgetBusinessdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetBusinessdata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getpromotions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getpromotions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getpromotions(rctx, args["tenantid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Getpromotiondata)
	fc.Result = res
	return ec.marshalOgetpromotiondata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetpromotiondata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getpromotypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getpromotypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Promotypesdata)
	fc.Result = res
	return ec.marshalOpromotypesdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotypesdata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getchargetypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getchargetypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Chargetypedata)
	fc.Result = res
	return ec.marshalOchargetypedata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargetypedata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getlocationbyid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getlocationbyid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getlocationbyid(rctx, args["tenantid"].(int), args["locationid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Locationbyiddata)
	fc.Result = res
	return ec.marshalOlocationbyiddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationbyiddata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getpayments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getpayments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getpayments(rctx, args["tenantid"].(int), args["typeid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Getpaymentdata)
	fc.Result = res
	return ec.marshalOgetpaymentdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetpaymentdata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getsubscriptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getsubscriptions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getsubscriptions(rctx, args["tenantid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Getsubscriptionsdata)
	fc.Result = res
	return ec.marshalOgetsubscriptionsdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetsubscriptionsdata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getnonsubscribed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getnonsubscribed_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getnonsubscribed(rctx, args["tenantid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Getnonsubscribeddata)
	fc.Result = res
	return ec.marshalOgetnonsubscribeddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetnonsubscribeddata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getallmodule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getallmodule_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getallmodule(rctx, args["categoryid"].(int), args["tenantid"].(int), args["mode"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Getallmoduledata)
	fc.Result = res
	return ec.marshalOgetallmoduledata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetallmoduledata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getallpromos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getallpromos_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getallpromos(rctx, args["moduleid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Getallpromodata)
	fc.Result = res
	return ec.marshalOgetallpromodata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetallpromodata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getsubcategorybyid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getsubcategorybyid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getsubcategorybyid(rctx, args["categoryid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Getsubcategorydata)
	fc.Result = res
	return ec.marshalOgetsubcategorydata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetsubcategorydata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_gettenantsubcategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_gettenantsubcategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Gettenantsubcategory(rctx, args["tenantid"].(int), args["categoryid"].(int), args["moduleid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Gettenantsubcategorydata)
	fc.Result = res
	return ec.marshalOgettenantsubcategorydata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGettenantsubcategorydata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getnonsubscribedcategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getnonsubscribedcategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getnonsubscribedcategory(rctx, args["tenantid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Getnonsubscribedcategorydata)
	fc.Result = res
	return ec.marshalOgetnonsubscribedcategorydata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetnonsubscribedcategorydata(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_gettenantinfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_gettenantinfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Gettenantinfo(rctx, args["tenantid"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalOresult2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Sparkle_category(ctx context.Context, field graphql.CollectedField, obj *model.Sparkle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Sparkle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Cat)
	fc.Result = res
	return ec.marshalNCat2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐCat(ctx, field.Selections, res)
}

func (ec *executionContext) _Sparkle_subcategory(ctx context.Context, field graphql.CollectedField, obj *model.Sparkle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Sparkle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Subcat)
	fc.Result = res
	return ec.marshalNsubcat2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcat(ctx, field.Selections, res)
}

func (ec *executionContext) _Sparkle_package(ctx context.Context, field graphql.CollectedField, obj *model.Sparkle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Sparkle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Package, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Package)
	fc.Result = res
	return ec.marshalNPackage2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPackage(ctx, field.Selections, res)
}

func (ec *executionContext) _SubCategory_CategoryId(ctx context.Context, field graphql.CollectedField, obj *model.SubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SubCategory_SubCategoryId(ctx context.Context, field graphql.CollectedField, obj *model.SubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SubCategory_Name(ctx context.Context, field graphql.CollectedField, obj *model.SubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SubCategory_Type(ctx context.Context, field graphql.CollectedField, obj *model.SubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SubCategory_SortOrder(ctx context.Context, field graphql.CollectedField, obj *model.SubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SubCategory_Status(ctx context.Context, field graphql.CollectedField, obj *model.SubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SubCategory_Icon(ctx context.Context, field graphql.CollectedField, obj *model.SubCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Tenantname(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Moduleid(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moduleid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Featureid(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Featureid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Modulename(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modulename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Subscriptionid(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscriptionid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Tenantaccid(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantaccid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Locationname(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Categoryid(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Subcategoryid(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcategoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Taxamount(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxamount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _TenantData_Totalamount(ctx context.Context, field graphql.CollectedField, obj *model.TenantData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TenantData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Totalamount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_Moduleid(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moduleid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_Modulename(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modulename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_brandname(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brandname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_about(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.About, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_email(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_phone(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_address(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_cod(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_digital(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Digital, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_tenantaccid(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantaccid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_tenanttoken(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenanttoken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Tenantschema_tenantimage(ctx context.Context, field graphql.CollectedField, obj *model.Tenantschema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Tenantschema",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantimage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _businessdata_status(ctx context.Context, field graphql.CollectedField, obj *model.Businessdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "businessdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _businessdata_code(ctx context.Context, field graphql.CollectedField, obj *model.Businessdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "businessdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _businessdata_message(ctx context.Context, field graphql.CollectedField, obj *model.Businessdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "businessdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _businessdata_updated(ctx context.Context, field graphql.CollectedField, obj *model.Businessdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "businessdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _chargetype_Chargeid(ctx context.Context, field graphql.CollectedField, obj *model.Chargetype) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "chargetype",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chargeid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _chargetype_Chargename(ctx context.Context, field graphql.CollectedField, obj *model.Chargetype) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "chargetype",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chargename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _chargetype_Status(ctx context.Context, field graphql.CollectedField, obj *model.Chargetype) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "chargetype",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _chargetypedata_status(ctx context.Context, field graphql.CollectedField, obj *model.Chargetypedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "chargetypedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _chargetypedata_code(ctx context.Context, field graphql.CollectedField, obj *model.Chargetypedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "chargetypedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _chargetypedata_message(ctx context.Context, field graphql.CollectedField, obj *model.Chargetypedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "chargetypedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _chargetypedata_types(ctx context.Context, field graphql.CollectedField, obj *model.Chargetypedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "chargetypedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Chargetype)
	fc.Result = res
	return ec.marshalOchargetype2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargetype(ctx, field.Selections, res)
}

func (ec *executionContext) _deliverycharge_Settingsid(ctx context.Context, field graphql.CollectedField, obj *model.Deliverycharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "deliverycharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settingsid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _deliverycharge_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Deliverycharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "deliverycharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _deliverycharge_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.Deliverycharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "deliverycharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _deliverycharge_Slabtype(ctx context.Context, field graphql.CollectedField, obj *model.Deliverycharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "deliverycharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slabtype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _deliverycharge_Slab(ctx context.Context, field graphql.CollectedField, obj *model.Deliverycharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "deliverycharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slab, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _deliverycharge_Slablimit(ctx context.Context, field graphql.CollectedField, obj *model.Deliverycharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "deliverycharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slablimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _deliverycharge_Slabcharge(ctx context.Context, field graphql.CollectedField, obj *model.Deliverycharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "deliverycharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slabcharge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getBusinessdata_status(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getBusinessdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _getBusinessdata_code(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getBusinessdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _getBusinessdata_message(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getBusinessdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getBusinessdata_businessinfo(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getBusinessdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Businessinfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Info)
	fc.Result = res
	return ec.marshalOinfo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _getalllocations_status(ctx context.Context, field graphql.CollectedField, obj *model.Getalllocations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getalllocations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _getalllocations_code(ctx context.Context, field graphql.CollectedField, obj *model.Getalllocations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getalllocations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _getalllocations_message(ctx context.Context, field graphql.CollectedField, obj *model.Getalllocations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getalllocations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getalllocations_locations(ctx context.Context, field graphql.CollectedField, obj *model.Getalllocations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getalllocations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Locationgetall)
	fc.Result = res
	return ec.marshalOlocationgetall2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationgetall(ctx, field.Selections, res)
}

func (ec *executionContext) _getallmoduledata_status(ctx context.Context, field graphql.CollectedField, obj *model.Getallmoduledata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getallmoduledata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _getallmoduledata_code(ctx context.Context, field graphql.CollectedField, obj *model.Getallmoduledata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getallmoduledata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _getallmoduledata_message(ctx context.Context, field graphql.CollectedField, obj *model.Getallmoduledata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getallmoduledata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getallmoduledata_modules(ctx context.Context, field graphql.CollectedField, obj *model.Getallmoduledata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getallmoduledata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mod)
	fc.Result = res
	return ec.marshalOmod2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐMod(ctx, field.Selections, res)
}

func (ec *executionContext) _getallpromodata_status(ctx context.Context, field graphql.CollectedField, obj *model.Getallpromodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getallpromodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _getallpromodata_code(ctx context.Context, field graphql.CollectedField, obj *model.Getallpromodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getallpromodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _getallpromodata_message(ctx context.Context, field graphql.CollectedField, obj *model.Getallpromodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getallpromodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getallpromodata_promos(ctx context.Context, field graphql.CollectedField, obj *model.Getallpromodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getallpromodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Promo)
	fc.Result = res
	return ec.marshalOpromo2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromo(ctx, field.Selections, res)
}

func (ec *executionContext) _getnonsubscribedcategorydata_status(ctx context.Context, field graphql.CollectedField, obj *model.Getnonsubscribedcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getnonsubscribedcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _getnonsubscribedcategorydata_code(ctx context.Context, field graphql.CollectedField, obj *model.Getnonsubscribedcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getnonsubscribedcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _getnonsubscribedcategorydata_message(ctx context.Context, field graphql.CollectedField, obj *model.Getnonsubscribedcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getnonsubscribedcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getnonsubscribedcategorydata_category(ctx context.Context, field graphql.CollectedField, obj *model.Getnonsubscribedcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getnonsubscribedcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Cat)
	fc.Result = res
	return ec.marshalOCat2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐCat(ctx, field.Selections, res)
}

func (ec *executionContext) _getnonsubscribeddata_status(ctx context.Context, field graphql.CollectedField, obj *model.Getnonsubscribeddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getnonsubscribeddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _getnonsubscribeddata_code(ctx context.Context, field graphql.CollectedField, obj *model.Getnonsubscribeddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getnonsubscribeddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _getnonsubscribeddata_message(ctx context.Context, field graphql.CollectedField, obj *model.Getnonsubscribeddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getnonsubscribeddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getnonsubscribeddata_nonsubscribed(ctx context.Context, field graphql.CollectedField, obj *model.Getnonsubscribeddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getnonsubscribeddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nonsubscribed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Package)
	fc.Result = res
	return ec.marshalOPackage2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPackage(ctx, field.Selections, res)
}

func (ec *executionContext) _getpaymentdata_status(ctx context.Context, field graphql.CollectedField, obj *model.Getpaymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getpaymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _getpaymentdata_code(ctx context.Context, field graphql.CollectedField, obj *model.Getpaymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getpaymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _getpaymentdata_message(ctx context.Context, field graphql.CollectedField, obj *model.Getpaymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getpaymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getpaymentdata_payments(ctx context.Context, field graphql.CollectedField, obj *model.Getpaymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getpaymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Paymentdata)
	fc.Result = res
	return ec.marshalOpaymentdata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPaymentdata(ctx, field.Selections, res)
}

func (ec *executionContext) _getpromotiondata_status(ctx context.Context, field graphql.CollectedField, obj *model.Getpromotiondata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getpromotiondata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _getpromotiondata_code(ctx context.Context, field graphql.CollectedField, obj *model.Getpromotiondata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getpromotiondata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _getpromotiondata_message(ctx context.Context, field graphql.CollectedField, obj *model.Getpromotiondata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getpromotiondata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getpromotiondata_promotions(ctx context.Context, field graphql.CollectedField, obj *model.Getpromotiondata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getpromotiondata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Promotion)
	fc.Result = res
	return ec.marshalOPromotion2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotion(ctx, field.Selections, res)
}

func (ec *executionContext) _getsubcategorydata_status(ctx context.Context, field graphql.CollectedField, obj *model.Getsubcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getsubcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _getsubcategorydata_code(ctx context.Context, field graphql.CollectedField, obj *model.Getsubcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getsubcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _getsubcategorydata_message(ctx context.Context, field graphql.CollectedField, obj *model.Getsubcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getsubcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getsubcategorydata_subcategories(ctx context.Context, field graphql.CollectedField, obj *model.Getsubcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getsubcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Subcat)
	fc.Result = res
	return ec.marshalOsubcat2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcat(ctx, field.Selections, res)
}

func (ec *executionContext) _getsubscriptionsdata_status(ctx context.Context, field graphql.CollectedField, obj *model.Getsubscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getsubscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _getsubscriptionsdata_code(ctx context.Context, field graphql.CollectedField, obj *model.Getsubscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getsubscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _getsubscriptionsdata_message(ctx context.Context, field graphql.CollectedField, obj *model.Getsubscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getsubscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _getsubscriptionsdata_subscribed(ctx context.Context, field graphql.CollectedField, obj *model.Getsubscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getsubscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscribed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Subscriptionsdata)
	fc.Result = res
	return ec.marshalOsubscriptionsdata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscriptionsdata(ctx, field.Selections, res)
}

func (ec *executionContext) _gettenantsubcategorydata_status(ctx context.Context, field graphql.CollectedField, obj *model.Gettenantsubcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "gettenantsubcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _gettenantsubcategorydata_code(ctx context.Context, field graphql.CollectedField, obj *model.Gettenantsubcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "gettenantsubcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _gettenantsubcategorydata_message(ctx context.Context, field graphql.CollectedField, obj *model.Gettenantsubcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "gettenantsubcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _gettenantsubcategorydata_tenantsubcategories(ctx context.Context, field graphql.CollectedField, obj *model.Gettenantsubcategorydata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "gettenantsubcategorydata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantsubcategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tenantsubcat)
	fc.Result = res
	return ec.marshalOtenantsubcat2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantsubcat(ctx, field.Selections, res)
}

func (ec *executionContext) _info_tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _info_moduleid(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moduleid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _info_modulename(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modulename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _info_brandname(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brandname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _info_about(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.About, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _info_email(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _info_phone(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _info_address(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _info_cod(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _info_digital(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Digital, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _info_tenantaccid(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantaccid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _info_tenanttoken(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenanttoken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _info_tenantimage(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantimage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _info_countrycode(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Countrycode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _info_currencycode(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currencycode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _info_currencysymbol(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currencysymbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _info_social(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Social, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Socialinfo)
	fc.Result = res
	return ec.marshalOsocialinfo2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialinfo(ctx, field.Selections, res)
}

func (ec *executionContext) _locationbyiddata_status(ctx context.Context, field graphql.CollectedField, obj *model.Locationbyiddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationbyiddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _locationbyiddata_code(ctx context.Context, field graphql.CollectedField, obj *model.Locationbyiddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationbyiddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _locationbyiddata_message(ctx context.Context, field graphql.CollectedField, obj *model.Locationbyiddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationbyiddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationbyiddata_locationdata(ctx context.Context, field graphql.CollectedField, obj *model.Locationbyiddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationbyiddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationdata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Locationgetall)
	fc.Result = res
	return ec.marshalOlocationgetall2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationgetall(ctx, field.Selections, res)
}

func (ec *executionContext) _locationdata_status(ctx context.Context, field graphql.CollectedField, obj *model.Locationdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _locationdata_code(ctx context.Context, field graphql.CollectedField, obj *model.Locationdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _locationdata_message(ctx context.Context, field graphql.CollectedField, obj *model.Locationdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationdata_locationinfo(ctx context.Context, field graphql.CollectedField, obj *model.Locationdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationinfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LocationInfo)
	fc.Result = res
	return ec.marshalNLocationInfo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_locationid(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_locationName(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_email(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_contact(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_address(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_suburb(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suburb, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_city(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_state(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_postcode(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Postcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_countycode(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Countycode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_latitude(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_longitude(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_openingtime(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Openingtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_closingtime(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Closingtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_delivery(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delivery, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_deliverytype(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deliverytype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_deliverymins(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deliverymins, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_status(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_createdby(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Createdby, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_tenantusers(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantusers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Userinfodata)
	fc.Result = res
	return ec.marshalOuserinfodata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserinfodata(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_othercharges(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Othercharges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Othercharge)
	fc.Result = res
	return ec.marshalOothercharge2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐOthercharge(ctx, field.Selections, res)
}

func (ec *executionContext) _locationgetall_deliverycharges(ctx context.Context, field graphql.CollectedField, obj *model.Locationgetall) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "locationgetall",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deliverycharges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Deliverycharge)
	fc.Result = res
	return ec.marshalOdeliverycharge2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDeliverycharge(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Moduleid(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moduleid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Categoryid(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Subcategoryid(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcategoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Subcategoryname(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcategoryname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Modulename(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modulename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Baseprice(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Baseprice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Taxpercent(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxpercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Taxamount(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxamount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Amount(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Content(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Logourl(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logourl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _mod_Iconurl(ctx context.Context, field graphql.CollectedField, obj *model.Mod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iconurl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _othercharge_Tenantchargeid(ctx context.Context, field graphql.CollectedField, obj *model.Othercharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "othercharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantchargeid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _othercharge_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Othercharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "othercharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _othercharge_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.Othercharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "othercharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _othercharge_Chargeid(ctx context.Context, field graphql.CollectedField, obj *model.Othercharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "othercharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chargeid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _othercharge_Chargename(ctx context.Context, field graphql.CollectedField, obj *model.Othercharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "othercharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chargename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _othercharge_Chargetype(ctx context.Context, field graphql.CollectedField, obj *model.Othercharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "othercharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chargetype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _othercharge_Chargevalue(ctx context.Context, field graphql.CollectedField, obj *model.Othercharge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "othercharge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chargevalue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Paymentid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paymentid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Moduleid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moduleid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Paymentref(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paymentref, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Paymenttypeid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paymenttypeid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Customerid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customerid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Transactiondate(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transactiondate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Orderid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Orderid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Chargeid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chargeid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Amount(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Refundamt(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Refundamt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Paymentstatus(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paymentstatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Created(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdata_Paymentdetails(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paymentdetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Paymentdetaildata)
	fc.Result = res
	return ec.marshalOpaymentdetaildata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPaymentdetaildata(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Paymentdetailid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paymentdetailid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Paymentid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paymentid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Moduleid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moduleid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Orderid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Orderid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Subscriptionid(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscriptionid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Amount(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Taxpercent(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxpercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Taxamount(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxamount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Payamount(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payamount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _paymentdetaildata_Customerinfo(ctx context.Context, field graphql.CollectedField, obj *model.Paymentdetaildata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "paymentdetaildata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customerinfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Custinfo)
	fc.Result = res
	return ec.marshalOCustinfo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐCustinfo(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Promocodeid(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promocodeid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Moduleid(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moduleid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Partnerid(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Partnerid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Packageid(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Packageid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Promoname(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promoname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Promodescription(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promodescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Packageexpiry(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Packageexpiry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Promotype(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Promovalue(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promovalue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Validity(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Validitystatus(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validitystatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Companyname(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Companyname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Address(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_City(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promo_Postcode(ctx context.Context, field graphql.CollectedField, obj *model.Promo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Postcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promotioncreateddata_status(ctx context.Context, field graphql.CollectedField, obj *model.Promotioncreateddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotioncreateddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _promotioncreateddata_code(ctx context.Context, field graphql.CollectedField, obj *model.Promotioncreateddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotioncreateddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _promotioncreateddata_message(ctx context.Context, field graphql.CollectedField, obj *model.Promotioncreateddata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotioncreateddata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promotypesdata_status(ctx context.Context, field graphql.CollectedField, obj *model.Promotypesdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotypesdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _promotypesdata_code(ctx context.Context, field graphql.CollectedField, obj *model.Promotypesdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotypesdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _promotypesdata_message(ctx context.Context, field graphql.CollectedField, obj *model.Promotypesdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotypesdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _promotypesdata_types(ctx context.Context, field graphql.CollectedField, obj *model.Promotypesdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "promotypesdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Typedata)
	fc.Result = res
	return ec.marshalOtypedata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTypedata(ctx, field.Selections, res)
}

func (ec *executionContext) _result_status(ctx context.Context, field graphql.CollectedField, obj *model.Result) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "result",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _result_code(ctx context.Context, field graphql.CollectedField, obj *model.Result) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "result",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _result_message(ctx context.Context, field graphql.CollectedField, obj *model.Result) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "result",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _socialinfo_socialid(ctx context.Context, field graphql.CollectedField, obj *model.Socialinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "socialinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Socialid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _socialinfo_socialprofile(ctx context.Context, field graphql.CollectedField, obj *model.Socialinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "socialinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Socialprofile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _socialinfo_dailcode(ctx context.Context, field graphql.CollectedField, obj *model.Socialinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "socialinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dailcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _socialinfo_sociallink(ctx context.Context, field graphql.CollectedField, obj *model.Socialinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "socialinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sociallink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _socialinfo_socialicon(ctx context.Context, field graphql.CollectedField, obj *model.Socialinfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "socialinfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Socialicon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _staffdetail_Staffdetailid(ctx context.Context, field graphql.CollectedField, obj *model.Staffdetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "staffdetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Staffdetailid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _staffdetail_Tenanatstaffid(ctx context.Context, field graphql.CollectedField, obj *model.Staffdetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "staffdetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenanatstaffid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _staffdetail_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Staffdetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "staffdetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _staffdetail_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.Staffdetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "staffdetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _staffdetail_Locationdetails(ctx context.Context, field graphql.CollectedField, obj *model.Staffdetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "staffdetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationdetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Stafflocation)
	fc.Result = res
	return ec.marshalOstafflocation2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐStafflocation(ctx, field.Selections, res)
}

func (ec *executionContext) _stafflocation_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.Stafflocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "stafflocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _stafflocation_Locationname(ctx context.Context, field graphql.CollectedField, obj *model.Stafflocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "stafflocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _stafflocation_Email(ctx context.Context, field graphql.CollectedField, obj *model.Stafflocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "stafflocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _stafflocation_Contact(ctx context.Context, field graphql.CollectedField, obj *model.Stafflocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "stafflocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _stafflocation_Address(ctx context.Context, field graphql.CollectedField, obj *model.Stafflocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "stafflocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _stafflocation_City(ctx context.Context, field graphql.CollectedField, obj *model.Stafflocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "stafflocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _stafflocation_Postcode(ctx context.Context, field graphql.CollectedField, obj *model.Stafflocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "stafflocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Postcode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subcat_Subcategoryname(ctx context.Context, field graphql.CollectedField, obj *model.Subcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcategoryname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subcat_Subcategoryid(ctx context.Context, field graphql.CollectedField, obj *model.Subcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcategoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _subcat_Categoryid(ctx context.Context, field graphql.CollectedField, obj *model.Subcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _subcat_Status(ctx context.Context, field graphql.CollectedField, obj *model.Subcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subcat_Icon(ctx context.Context, field graphql.CollectedField, obj *model.Subcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscribedData_status(ctx context.Context, field graphql.CollectedField, obj *model.SubscribedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscribedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _subscribedData_code(ctx context.Context, field graphql.CollectedField, obj *model.SubscribedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscribedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _subscribedData_message(ctx context.Context, field graphql.CollectedField, obj *model.SubscribedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscribedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscribedData_info(ctx context.Context, field graphql.CollectedField, obj *model.SubscribedData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscribedData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Info, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TenantData)
	fc.Result = res
	return ec.marshalNTenantData2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantData(ctx, field.Selections, res)
}

func (ec *executionContext) _subscribedDataResponse_status(ctx context.Context, field graphql.CollectedField, obj *model.SubscribedDataResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscribedDataResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _subscribedDataResponse_code(ctx context.Context, field graphql.CollectedField, obj *model.SubscribedDataResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscribedDataResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _subscribedDataResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.SubscribedDataResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscribedDataResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscribedDataResponse_info(ctx context.Context, field graphql.CollectedField, obj *model.SubscribedDataResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscribedDataResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Info, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TenantData)
	fc.Result = res
	return ec.marshalOTenantData2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantData(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Subscriptionid(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscriptionid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Packageid(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Packageid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Moduleid(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moduleid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Featureid(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Featureid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Categoryid(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Subcategoryid(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcategoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Validitydate(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validitydate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Validity(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Modulename(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modulename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Subscriptionaccid(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscriptionaccid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Subscriptionmethodid(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscriptionmethodid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Paymentstatus(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paymentstatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Packagename(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Packagename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_LogoUrl(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Iconurl(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iconurl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_PackageIcon(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageIcon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_PackageAmount(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_TotalAmount(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Taxamount(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Taxamount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Tenantaccid(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantaccid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Customercount(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customercount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _subscriptionsdata_Locationcount(ctx context.Context, field graphql.CollectedField, obj *model.Subscriptionsdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscriptionsdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationcount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantsubcat_Categoryid(ctx context.Context, field graphql.CollectedField, obj *model.Tenantsubcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantsubcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantsubcat_Subcategoryid(ctx context.Context, field graphql.CollectedField, obj *model.Tenantsubcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantsubcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcategoryid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantsubcat_Subcategoryname(ctx context.Context, field graphql.CollectedField, obj *model.Tenantsubcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantsubcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subcategoryname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantsubcat_Icon(ctx context.Context, field graphql.CollectedField, obj *model.Tenantsubcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantsubcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantsubcat_Selected(ctx context.Context, field graphql.CollectedField, obj *model.Tenantsubcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantsubcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantsubcat_Categoryname(ctx context.Context, field graphql.CollectedField, obj *model.Tenantsubcat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantsubcat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categoryname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantupdatedata_status(ctx context.Context, field graphql.CollectedField, obj *model.Tenantupdatedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantupdatedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantupdatedata_code(ctx context.Context, field graphql.CollectedField, obj *model.Tenantupdatedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantupdatedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantupdatedata_message(ctx context.Context, field graphql.CollectedField, obj *model.Tenantupdatedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantupdatedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantupdatedata_updated(ctx context.Context, field graphql.CollectedField, obj *model.Tenantupdatedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantupdatedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantuserdata_status(ctx context.Context, field graphql.CollectedField, obj *model.Tenantuserdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantuserdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantuserdata_code(ctx context.Context, field graphql.CollectedField, obj *model.Tenantuserdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantuserdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantuserdata_message(ctx context.Context, field graphql.CollectedField, obj *model.Tenantuserdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantuserdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _tenantuserdata_tenantuser(ctx context.Context, field graphql.CollectedField, obj *model.Tenantuserdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "tenantuserdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantuser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNuser2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _typedata_Promotiontypeid(ctx context.Context, field graphql.CollectedField, obj *model.Typedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "typedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotiontypeid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _typedata_Typename(ctx context.Context, field graphql.CollectedField, obj *model.Typedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "typedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Typename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _typedata_Tag(ctx context.Context, field graphql.CollectedField, obj *model.Typedata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "typedata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _user_userid(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Userid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userfromtenant_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Userfromtenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userfromtenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userfromtenant_Userid(ctx context.Context, field graphql.CollectedField, obj *model.Userfromtenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userfromtenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Userid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userfromtenant_Firstname(ctx context.Context, field graphql.CollectedField, obj *model.Userfromtenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userfromtenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userfromtenant_Lastname(ctx context.Context, field graphql.CollectedField, obj *model.Userfromtenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userfromtenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userfromtenant_Email(ctx context.Context, field graphql.CollectedField, obj *model.Userfromtenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userfromtenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userfromtenant_Contact(ctx context.Context, field graphql.CollectedField, obj *model.Userfromtenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userfromtenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userfromtenant_Profileimage(ctx context.Context, field graphql.CollectedField, obj *model.Userfromtenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userfromtenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profileimage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userfromtenant_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.Userfromtenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userfromtenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userfromtenant_Locationname(ctx context.Context, field graphql.CollectedField, obj *model.Userfromtenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userfromtenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userinfodata_Profileid(ctx context.Context, field graphql.CollectedField, obj *model.Userinfodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userinfodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profileid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userinfodata_Userid(ctx context.Context, field graphql.CollectedField, obj *model.Userinfodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userinfodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Userid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userinfodata_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.Userinfodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userinfodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userinfodata_Firstname(ctx context.Context, field graphql.CollectedField, obj *model.Userinfodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userinfodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userinfodata_Lastname(ctx context.Context, field graphql.CollectedField, obj *model.Userinfodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userinfodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userinfodata_Email(ctx context.Context, field graphql.CollectedField, obj *model.Userinfodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userinfodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userinfodata_Contact(ctx context.Context, field graphql.CollectedField, obj *model.Userinfodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userinfodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userinfodata_Profileimage(ctx context.Context, field graphql.CollectedField, obj *model.Userinfodata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userinfodata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profileimage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _userlist_Tenantstaffid(ctx context.Context, field graphql.CollectedField, obj *model.Userlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userlist",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantstaffid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userlist_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Userlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userlist",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userlist_Moduleid(ctx context.Context, field graphql.CollectedField, obj *model.Userlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userlist",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moduleid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userlist_Userid(ctx context.Context, field graphql.CollectedField, obj *model.Userlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userlist",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Userid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _userlist_Userinfo(ctx context.Context, field graphql.CollectedField, obj *model.Userlist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userlist",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Userinfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Userinfodata)
	fc.Result = res
	return ec.marshalOuserinfodata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserinfodata(ctx, field.Selections, res)
}

func (ec *executionContext) _usersdata_status(ctx context.Context, field graphql.CollectedField, obj *model.Usersdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "usersdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _usersdata_code(ctx context.Context, field graphql.CollectedField, obj *model.Usersdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "usersdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _usersdata_message(ctx context.Context, field graphql.CollectedField, obj *model.Usersdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "usersdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _usersdata_users(ctx context.Context, field graphql.CollectedField, obj *model.Usersdata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "usersdata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Userfromtenant)
	fc.Result = res
	return ec.marshalOuserfromtenant2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserfromtenant(ctx, field.Selections, res)
}

func (ec *executionContext) _usertenant_Staffdetailid(ctx context.Context, field graphql.CollectedField, obj *model.Usertenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "usertenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Staffdetailid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _usertenant_Tenanatstaffid(ctx context.Context, field graphql.CollectedField, obj *model.Usertenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "usertenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenanatstaffid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _usertenant_Tenantid(ctx context.Context, field graphql.CollectedField, obj *model.Usertenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "usertenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _usertenant_Locationid(ctx context.Context, field graphql.CollectedField, obj *model.Usertenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "usertenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locationid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _usertenant_Tenantusers(ctx context.Context, field graphql.CollectedField, obj *model.Usertenant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "usertenant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenantusers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Userlist)
	fc.Result = res
	return ec.marshalOuserlist2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserlist(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputTenantAddress(ctx context.Context, obj interface{}) (model.TenantAddress, error) {
	var it model.TenantAddress
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Suburb":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Suburb"))
			it.Suburb, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "City":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("City"))
			it.City, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "State":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("State"))
			it.State, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Zip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Zip"))
			it.Zip, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Countrycode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Countrycode"))
			it.Countrycode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Currencyid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Currencyid"))
			it.Currencyid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Currencycode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Currencycode"))
			it.Currencycode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Currencysymbol":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Currencysymbol"))
			it.Currencysymbol, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Latitude"))
			it.Latitude, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Longitude"))
			it.Longitude, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TimeZone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TimeZone"))
			it.TimeZone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Opentime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Opentime"))
			it.Opentime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Closetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Closetime"))
			it.Closetime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenantDetails(ctx context.Context, obj interface{}) (model.TenantDetails, error) {
	var it model.TenantDetails
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Regno":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Regno"))
			it.Regno, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Mobile"))
			it.Mobile, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Tenanttoken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenanttoken"))
			it.Tenanttoken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbusiness(ctx context.Context, obj interface{}) (model.Business, error) {
	var it model.Business
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "businessupdate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessupdate"))
			it.Businessupdate, err = ec.unmarshalObusinessupdatedata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐBusinessupdatedata(ctx, v)
			if err != nil {
				return it, err
			}
		case "socialadd":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socialadd"))
			it.Socialadd, err = ec.unmarshalOsocialadddata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialadddata(ctx, v)
			if err != nil {
				return it, err
			}
		case "socialupdate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socialupdate"))
			it.Socialupdate, err = ec.unmarshalOsocialupdatedata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialupdatedata(ctx, v)
			if err != nil {
				return it, err
			}
		case "socialdelete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socialdelete"))
			it.Socialdelete, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbusinessupdatedata(ctx context.Context, obj interface{}) (model.Businessupdatedata, error) {
	var it model.Businessupdatedata
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "brandname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brandname"))
			it.Brandname, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "about":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("about"))
			it.About, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cod"))
			it.Cod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "digital":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("digital"))
			it.Digital, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tenantimage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantimage"))
			it.Tenantimage, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchargecreate(ctx context.Context, obj interface{}) (model.Chargecreate, error) {
	var it model.Chargecreate
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deliverycharges":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverycharges"))
			it.Deliverycharges, err = ec.unmarshalOdeliverychargeinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDeliverychargeinput(ctx, v)
			if err != nil {
				return it, err
			}
		case "othercharges":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("othercharges"))
			it.Othercharges, err = ec.unmarshalOchargecreateinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargecreateinput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchargecreateinput(ctx context.Context, obj interface{}) (model.Chargecreateinput, error) {
	var it model.Chargecreateinput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Locationid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Locationid"))
			it.Locationid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Chargeid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Chargeid"))
			it.Chargeid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Chargename":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Chargename"))
			it.Chargename, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Chargetype":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Chargetype"))
			it.Chargetype, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Chargevalue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Chargevalue"))
			it.Chargevalue, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchargeupdate(ctx context.Context, obj interface{}) (model.Chargeupdate, error) {
	var it model.Chargeupdate
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "updatedeliverycharges":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedeliverycharges"))
			it.Updatedeliverycharges, err = ec.unmarshalOupdatedelivery2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdatedelivery(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateothercharges":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updateothercharges"))
			it.Updateothercharges, err = ec.unmarshalOupdateother2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdateother(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchargeupdateinput(ctx context.Context, obj interface{}) (model.Chargeupdateinput, error) {
	var it model.Chargeupdateinput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Tenantchargeid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantchargeid"))
			it.Tenantchargeid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Locationid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Locationid"))
			it.Locationid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Chargeid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Chargeid"))
			it.Chargeid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Chargename":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Chargename"))
			it.Chargename, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Chargetype":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Chargetype"))
			it.Chargetype, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Chargevalue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Chargevalue"))
			it.Chargevalue, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata(ctx context.Context, obj interface{}) (model.Data, error) {
	var it model.Data
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "tenantinfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantinfo"))
			it.Tenantinfo, err = ec.unmarshalOTenantDetails2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantDetails(ctx, v)
			if err != nil {
				return it, err
			}
		case "tenantlocation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantlocation"))
			it.Tenantlocation, err = ec.unmarshalOTenantAddress2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptiondetails":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptiondetails"))
			it.Subscriptiondetails, err = ec.unmarshalOinitialsubscribe2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐInitialsubscribe(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdeliverychargeinput(ctx context.Context, obj interface{}) (model.Deliverychargeinput, error) {
	var it model.Deliverychargeinput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Locationid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Locationid"))
			it.Locationid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Slabtype":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Slabtype"))
			it.Slabtype, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Slab":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Slab"))
			it.Slab, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Slablimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Slablimit"))
			it.Slablimit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Slabcharge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Slabcharge"))
			it.Slabcharge, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdelstatus(ctx context.Context, obj interface{}) (model.Delstatus, error) {
	var it model.Delstatus
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationid"))
			it.Locationid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "delivery":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delivery"))
			it.Delivery, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputinitialsubscribe(ctx context.Context, obj interface{}) (model.Initialsubscribe, error) {
	var it model.Initialsubscribe
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "TransactionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TransactionDate"))
			it.TransactionDate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Packageid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Packageid"))
			it.Packageid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Partnerid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Partnerid"))
			it.Partnerid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Moduleid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Moduleid"))
			it.Moduleid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Featureid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Featureid"))
			it.Featureid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Categoryid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Categoryid"))
			it.Categoryid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "SubCategoryid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SubCategoryid"))
			it.SubCategoryid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subcategoryname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subcategoryname"))
			it.Subcategoryname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Currencyid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Currencyid"))
			it.Currencyid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "CurrencyCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CurrencyCode"))
			it.CurrencyCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Price"))
			it.Price, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TaxId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TaxId"))
			it.TaxID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Quantity"))
			it.Quantity, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promoid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promoid"))
			it.Promoid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promovalue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promovalue"))
			it.Promovalue, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TaxAmount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TaxAmount"))
			it.TaxAmount, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TotalAmount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TotalAmount"))
			it.TotalAmount, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "PaymentStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PaymentStatus"))
			it.PaymentStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Paymentid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Paymentid"))
			it.Paymentid, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Validitydate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Validitydate"))
			it.Validitydate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputlocation(ctx context.Context, obj interface{}) (model.Location, error) {
	var it model.Location
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "TenantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TenantId"))
			it.TenantID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "LocationName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LocationName"))
			it.LocationName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Contact"))
			it.Contact, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Suburb":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Suburb"))
			it.Suburb, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "City":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("City"))
			it.City, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "State":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("State"))
			it.State, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Zip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Zip"))
			it.Zip, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Countrycode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Countrycode"))
			it.Countrycode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Latitude"))
			it.Latitude, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Longitude"))
			it.Longitude, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Openingtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Openingtime"))
			it.Openingtime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Closingtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Closingtime"))
			it.Closingtime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Delivery":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Delivery"))
			it.Delivery, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Deliverytype":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Deliverytype"))
			it.Deliverytype, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Deliverymins":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Deliverymins"))
			it.Deliverymins, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputlocationstatusinput(ctx context.Context, obj interface{}) (model.Locationstatusinput, error) {
	var it model.Locationstatusinput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "locationstatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationstatus"))
			it.Locationstatus, err = ec.unmarshalOlocstatus2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocstatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliverystatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliverystatus"))
			it.Deliverystatus, err = ec.unmarshalOdelstatus2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDelstatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputlocationupdate(ctx context.Context, obj interface{}) (model.Locationupdate, error) {
	var it model.Locationupdate
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Locationid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Locationid"))
			it.Locationid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "TenantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TenantId"))
			it.TenantID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "LocationName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LocationName"))
			it.LocationName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Contact"))
			it.Contact, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Suburb":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Suburb"))
			it.Suburb, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "City":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("City"))
			it.City, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "State":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("State"))
			it.State, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Zip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Zip"))
			it.Zip, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Countrycode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Countrycode"))
			it.Countrycode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Latitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Latitude"))
			it.Latitude, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Longitude":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Longitude"))
			it.Longitude, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Openingtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Openingtime"))
			it.Openingtime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Closingtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Closingtime"))
			it.Closingtime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Delivery":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Delivery"))
			it.Delivery, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Deliverytype":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Deliverytype"))
			it.Deliverytype, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Deliverymins":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Deliverymins"))
			it.Deliverymins, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputlocstatus(ctx context.Context, obj interface{}) (model.Locstatus, error) {
	var it model.Locstatus
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationid"))
			it.Locationid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpromoinput(ctx context.Context, obj interface{}) (model.Promoinput, error) {
	var it model.Promoinput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Promotiontypeid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promotiontypeid"))
			it.Promotiontypeid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promotionname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promotionname"))
			it.Promotionname, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promocode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promocode"))
			it.Promocode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promoterms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promoterms"))
			it.Promoterms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promovalue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promovalue"))
			it.Promovalue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Startdate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Startdate"))
			it.Startdate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Enddate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Enddate"))
			it.Enddate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsocialadddata(ctx context.Context, obj interface{}) (model.Socialadddata, error) {
	var it model.Socialadddata
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "socialprofile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socialprofile"))
			it.Socialprofile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dailcode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dailcode"))
			it.Dailcode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sociallink":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sociallink"))
			it.Sociallink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "socialicon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socialicon"))
			it.Socialicon, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsocialupdatedata(ctx context.Context, obj interface{}) (model.Socialupdatedata, error) {
	var it model.Socialupdatedata
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "socialid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socialid"))
			it.Socialid, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "socialprofile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socialprofile"))
			it.Socialprofile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dailcode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dailcode"))
			it.Dailcode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sociallink":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sociallink"))
			it.Sociallink, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "socialicon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socialicon"))
			it.Socialicon, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubcatinsertdata(ctx context.Context, obj interface{}) (model.Subcatinsertdata, error) {
	var it model.Subcatinsertdata
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Moduleid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Moduleid"))
			it.Moduleid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Categoryid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Categoryid"))
			it.Categoryid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subcategoryid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subcategoryid"))
			it.Subcategoryid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subcategoryname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subcategoryname"))
			it.Subcategoryname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscribemoreinput(ctx context.Context, obj interface{}) (model.Subscribemoreinput, error) {
	var it model.Subscribemoreinput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Subscriptionid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subscriptionid"))
			it.Subscriptionid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Featureid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Featureid"))
			it.Featureid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "TransactionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TransactionDate"))
			it.TransactionDate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Partnerid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Partnerid"))
			it.Partnerid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Currencyid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Currencyid"))
			it.Currencyid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Price"))
			it.Price, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TaxId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TaxId"))
			it.TaxID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Quantity"))
			it.Quantity, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promoid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promoid"))
			it.Promoid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promovalue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promovalue"))
			it.Promovalue, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TaxAmount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TaxAmount"))
			it.TaxAmount, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TotalAmount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TotalAmount"))
			it.TotalAmount, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "PaymentStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PaymentStatus"))
			it.PaymentStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Paymentid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Paymentid"))
			it.Paymentid, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Validitydate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Validitydate"))
			it.Validitydate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscription(ctx context.Context, obj interface{}) (model.Subscription, error) {
	var it model.Subscription
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "TransactionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TransactionDate"))
			it.TransactionDate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "PackageId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PackageId"))
			it.PackageID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ModuleId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ModuleId"))
			it.ModuleID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Featureid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Featureid"))
			it.Featureid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "CurrencyId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CurrencyId"))
			it.CurrencyID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "CurrencyCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CurrencyCode"))
			it.CurrencyCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Price"))
			it.Price, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TaxId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TaxId"))
			it.TaxID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Quantity"))
			it.Quantity, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promoid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promoid"))
			it.Promoid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promovalue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promovalue"))
			it.Promovalue, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TaxAmount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TaxAmount"))
			it.TaxAmount, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TotalAmount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TotalAmount"))
			it.TotalAmount, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "PaymentStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PaymentStatus"))
			it.PaymentStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "PaymentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PaymentId"))
			it.PaymentID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Validitydate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Validitydate"))
			it.Validitydate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsubscriptionnew(ctx context.Context, obj interface{}) (model.Subscriptionnew, error) {
	var it model.Subscriptionnew
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "TransactionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TransactionDate"))
			it.TransactionDate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Packageid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Packageid"))
			it.Packageid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Partnerid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Partnerid"))
			it.Partnerid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Moduleid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Moduleid"))
			it.Moduleid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Featureid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Featureid"))
			it.Featureid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "CategoryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CategoryId"))
			it.CategoryID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "SubCategoryId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SubCategoryId"))
			it.SubCategoryID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subcategoryname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subcategoryname"))
			it.Subcategoryname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Currencyid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Currencyid"))
			it.Currencyid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "CurrencyCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CurrencyCode"))
			it.CurrencyCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Price"))
			it.Price, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TaxId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TaxId"))
			it.TaxID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Quantity"))
			it.Quantity, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promoid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promoid"))
			it.Promoid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Promovalue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Promovalue"))
			it.Promovalue, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TaxAmount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TaxAmount"))
			it.TaxAmount, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "TotalAmount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TotalAmount"))
			it.TotalAmount, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "PaymentStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PaymentStatus"))
			it.PaymentStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Paymentid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Paymentid"))
			it.Paymentid, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Validitydate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Validitydate"))
			it.Validitydate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtenantuser(ctx context.Context, obj interface{}) (model.Tenantuser, error) {
	var it model.Tenantuser
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Moduleid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Moduleid"))
			it.Moduleid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstname"))
			it.Firstname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastname"))
			it.Lastname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileimage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileimage"))
			it.Profileimage, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationid"))
			it.Locationid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "roleid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleid"))
			it.Roleid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "configid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configid"))
			it.Configid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdatedelivery(ctx context.Context, obj interface{}) (model.Updatedelivery, error) {
	var it model.Updatedelivery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOdeliverychargeinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDeliverychargeinput(ctx, v)
			if err != nil {
				return it, err
			}
		case "update":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
			it.Update, err = ec.unmarshalOupdatedeliverychargeinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdatedeliverychargeinput(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete"))
			it.Delete, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdatedeliverychargeinput(ctx context.Context, obj interface{}) (model.Updatedeliverychargeinput, error) {
	var it model.Updatedeliverychargeinput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Settingsid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Settingsid"))
			it.Settingsid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Locationid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Locationid"))
			it.Locationid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Slabtype":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Slabtype"))
			it.Slabtype, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Slab":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Slab"))
			it.Slab, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Slablimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Slablimit"))
			it.Slablimit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Slabcharge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Slabcharge"))
			it.Slabcharge, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateinfo(ctx context.Context, obj interface{}) (model.Updateinfo, error) {
	var it model.Updateinfo
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Locationid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Locationid"))
			it.Locationid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Brandname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Brandname"))
			it.Brandname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "About":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("About"))
			it.About, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Tenantimage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Tenantimage"))
			it.Tenantimage, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Openingtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Openingtime"))
			it.Openingtime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Closingtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Closingtime"))
			it.Closingtime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateother(ctx context.Context, obj interface{}) (model.Updateother, error) {
	var it model.Updateother
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			it.Create, err = ec.unmarshalOchargecreateinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargecreateinput(ctx, v)
			if err != nil {
				return it, err
			}
		case "update":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
			it.Update, err = ec.unmarshalOchargeupdateinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargeupdateinput(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete"))
			it.Delete, err = ec.unmarshalOInt2ᚕᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdatetenant(ctx context.Context, obj interface{}) (model.Updatetenant, error) {
	var it model.Updatetenant
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userid"))
			it.Userid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "tenantid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantid"))
			it.Tenantid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleid"))
			it.Moduleid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationid"))
			it.Locationid, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstname"))
			it.Firstname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastname"))
			it.Lastname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "profileimage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileimage"))
			it.Profileimage, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var catImplementors = []string{"Cat"}

func (ec *executionContext) _Cat(ctx context.Context, sel ast.SelectionSet, obj *model.Cat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, catImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Cat")
		case "Categoryid":
			out.Values[i] = ec._Cat_Categoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Categoryname":
			out.Values[i] = ec._Cat_Categoryname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Categorytype":
			out.Values[i] = ec._Cat_Categorytype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Sortorder":
			out.Values[i] = ec._Cat_Sortorder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._Cat_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoryImplementors = []string{"Category"}

func (ec *executionContext) _Category(ctx context.Context, sel ast.SelectionSet, obj *model.Category) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Category")
		case "Categoryid":
			out.Values[i] = ec._Category_Categoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Name":
			out.Values[i] = ec._Category_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Type":
			out.Values[i] = ec._Category_Type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SortOrder":
			out.Values[i] = ec._Category_SortOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._Category_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var custinfoImplementors = []string{"Custinfo"}

func (ec *executionContext) _Custinfo(ctx context.Context, sel ast.SelectionSet, obj *model.Custinfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, custinfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Custinfo")
		case "Customerid":
			out.Values[i] = ec._Custinfo_Customerid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Firstname":
			out.Values[i] = ec._Custinfo_Firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Lastname":
			out.Values[i] = ec._Custinfo_Lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Email":
			out.Values[i] = ec._Custinfo_Email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Contact":
			out.Values[i] = ec._Custinfo_Contact(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Address":
			out.Values[i] = ec._Custinfo_Address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationInfoImplementors = []string{"LocationInfo"}

func (ec *executionContext) _LocationInfo(ctx context.Context, sel ast.SelectionSet, obj *model.LocationInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocationInfo")
		case "Locationid":
			out.Values[i] = ec._LocationInfo_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "LocationName":
			out.Values[i] = ec._LocationInfo_LocationName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._LocationInfo_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdby":
			out.Values[i] = ec._LocationInfo_createdby(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moduleImplementors = []string{"Module"}

func (ec *executionContext) _Module(ctx context.Context, sel ast.SelectionSet, obj *model.Module) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moduleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Module")
		case "ModuleId":
			out.Values[i] = ec._Module_ModuleId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CategoryId":
			out.Values[i] = ec._Module_CategoryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Name":
			out.Values[i] = ec._Module_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Content":
			out.Values[i] = ec._Module_Content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ImageUrl":
			out.Values[i] = ec._Module_ImageUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "LogoUrl":
			out.Values[i] = ec._Module_LogoUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "subscribe":
			out.Values[i] = ec._Mutation_subscribe(ctx, field)
		case "createtenantuser":
			out.Values[i] = ec._Mutation_createtenantuser(ctx, field)
		case "updatetenantuser":
			out.Values[i] = ec._Mutation_updatetenantuser(ctx, field)
		case "updatetenantbusiness":
			out.Values[i] = ec._Mutation_updatetenantbusiness(ctx, field)
		case "createlocation":
			out.Values[i] = ec._Mutation_createlocation(ctx, field)
		case "createpromotion":
			out.Values[i] = ec._Mutation_createpromotion(ctx, field)
		case "createcharges":
			out.Values[i] = ec._Mutation_createcharges(ctx, field)
		case "updatecharges":
			out.Values[i] = ec._Mutation_updatecharges(ctx, field)
		case "updatelocationstatus":
			out.Values[i] = ec._Mutation_updatelocationstatus(ctx, field)
		case "updatelocation":
			out.Values[i] = ec._Mutation_updatelocation(ctx, field)
		case "subscription":
			out.Values[i] = ec._Mutation_subscription(ctx, field)
		case "initialupdate":
			out.Values[i] = ec._Mutation_initialupdate(ctx, field)
		case "insertsubcategory":
			out.Values[i] = ec._Mutation_insertsubcategory(ctx, field)
		case "subscribemore":
			out.Values[i] = ec._Mutation_subscribemore(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var packageImplementors = []string{"Package"}

func (ec *executionContext) _Package(ctx context.Context, sel ast.SelectionSet, obj *model.Package) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, packageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Package")
		case "ModuleId":
			out.Values[i] = ec._Package_ModuleId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Modulename":
			out.Values[i] = ec._Package_Modulename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Name":
			out.Values[i] = ec._Package_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PackageId":
			out.Values[i] = ec._Package_PackageId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._Package_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PackageAmount":
			out.Values[i] = ec._Package_PackageAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PaymentMode":
			out.Values[i] = ec._Package_PaymentMode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PackageContent":
			out.Values[i] = ec._Package_PackageContent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PackageIcon":
			out.Values[i] = ec._Package_PackageIcon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promocodeid":
			out.Values[i] = ec._Package_Promocodeid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promonname":
			out.Values[i] = ec._Package_Promonname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promodescription":
			out.Values[i] = ec._Package_Promodescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promotype":
			out.Values[i] = ec._Package_Promotype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promovalue":
			out.Values[i] = ec._Package_Promovalue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Packageexpiry":
			out.Values[i] = ec._Package_Packageexpiry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Validitydate":
			out.Values[i] = ec._Package_Validitydate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Validity":
			out.Values[i] = ec._Package_Validity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var promotionImplementors = []string{"Promotion"}

func (ec *executionContext) _Promotion(ctx context.Context, sel ast.SelectionSet, obj *model.Promotion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, promotionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Promotion")
		case "PromotionId":
			out.Values[i] = ec._Promotion_PromotionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promotiontypeid":
			out.Values[i] = ec._Promotion_Promotiontypeid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promotionname":
			out.Values[i] = ec._Promotion_Promotionname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantid":
			out.Values[i] = ec._Promotion_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantame":
			out.Values[i] = ec._Promotion_Tenantame(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promocode":
			out.Values[i] = ec._Promotion_Promocode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promoterms":
			out.Values[i] = ec._Promotion_Promoterms(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promovalue":
			out.Values[i] = ec._Promotion_Promovalue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promotag":
			out.Values[i] = ec._Promotion_Promotag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promotype":
			out.Values[i] = ec._Promotion_Promotype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Startdate":
			out.Values[i] = ec._Promotion_Startdate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Enddate":
			out.Values[i] = ec._Promotion_Enddate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Broadstatus":
			out.Values[i] = ec._Promotion_Broadstatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Success":
			out.Values[i] = ec._Promotion_Success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Failure":
			out.Values[i] = ec._Promotion_Failure(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._Promotion_Status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "sparkle":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sparkle(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "location":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_location(ctx, field)
				return res
			})
		case "tenantusers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenantusers(ctx, field)
				return res
			})
		case "getBusiness":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusiness(ctx, field)
				return res
			})
		case "getpromotions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getpromotions(ctx, field)
				return res
			})
		case "getpromotypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getpromotypes(ctx, field)
				return res
			})
		case "getchargetypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getchargetypes(ctx, field)
				return res
			})
		case "getlocationbyid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getlocationbyid(ctx, field)
				return res
			})
		case "getpayments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getpayments(ctx, field)
				return res
			})
		case "getsubscriptions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getsubscriptions(ctx, field)
				return res
			})
		case "getnonsubscribed":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getnonsubscribed(ctx, field)
				return res
			})
		case "getallmodule":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getallmodule(ctx, field)
				return res
			})
		case "getallpromos":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getallpromos(ctx, field)
				return res
			})
		case "getsubcategorybyid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getsubcategorybyid(ctx, field)
				return res
			})
		case "gettenantsubcategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gettenantsubcategory(ctx, field)
				return res
			})
		case "getnonsubscribedcategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getnonsubscribedcategory(ctx, field)
				return res
			})
		case "gettenantinfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gettenantinfo(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sparkleImplementors = []string{"Sparkle"}

func (ec *executionContext) _Sparkle(ctx context.Context, sel ast.SelectionSet, obj *model.Sparkle) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sparkleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Sparkle")
		case "category":
			out.Values[i] = ec._Sparkle_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subcategory":
			out.Values[i] = ec._Sparkle_subcategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "package":
			out.Values[i] = ec._Sparkle_package(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subCategoryImplementors = []string{"SubCategory"}

func (ec *executionContext) _SubCategory(ctx context.Context, sel ast.SelectionSet, obj *model.SubCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubCategory")
		case "CategoryId":
			out.Values[i] = ec._SubCategory_CategoryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SubCategoryId":
			out.Values[i] = ec._SubCategory_SubCategoryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Name":
			out.Values[i] = ec._SubCategory_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Type":
			out.Values[i] = ec._SubCategory_Type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SortOrder":
			out.Values[i] = ec._SubCategory_SortOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._SubCategory_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Icon":
			out.Values[i] = ec._SubCategory_Icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tenantDataImplementors = []string{"TenantData"}

func (ec *executionContext) _TenantData(ctx context.Context, sel ast.SelectionSet, obj *model.TenantData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenantData")
		case "Tenantid":
			out.Values[i] = ec._TenantData_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantname":
			out.Values[i] = ec._TenantData_Tenantname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Moduleid":
			out.Values[i] = ec._TenantData_Moduleid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Featureid":
			out.Values[i] = ec._TenantData_Featureid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Modulename":
			out.Values[i] = ec._TenantData_Modulename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subscriptionid":
			out.Values[i] = ec._TenantData_Subscriptionid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantaccid":
			out.Values[i] = ec._TenantData_Tenantaccid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationid":
			out.Values[i] = ec._TenantData_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationname":
			out.Values[i] = ec._TenantData_Locationname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Categoryid":
			out.Values[i] = ec._TenantData_Categoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subcategoryid":
			out.Values[i] = ec._TenantData_Subcategoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Taxamount":
			out.Values[i] = ec._TenantData_Taxamount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Totalamount":
			out.Values[i] = ec._TenantData_Totalamount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tenantschemaImplementors = []string{"Tenantschema"}

func (ec *executionContext) _Tenantschema(ctx context.Context, sel ast.SelectionSet, obj *model.Tenantschema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantschemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tenantschema")
		case "Tenantid":
			out.Values[i] = ec._Tenantschema_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Moduleid":
			out.Values[i] = ec._Tenantschema_Moduleid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Modulename":
			out.Values[i] = ec._Tenantschema_Modulename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandname":
			out.Values[i] = ec._Tenantschema_brandname(ctx, field, obj)
		case "about":
			out.Values[i] = ec._Tenantschema_about(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Tenantschema_email(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._Tenantschema_phone(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Tenantschema_address(ctx, field, obj)
		case "cod":
			out.Values[i] = ec._Tenantschema_cod(ctx, field, obj)
		case "digital":
			out.Values[i] = ec._Tenantschema_digital(ctx, field, obj)
		case "tenantaccid":
			out.Values[i] = ec._Tenantschema_tenantaccid(ctx, field, obj)
		case "tenanttoken":
			out.Values[i] = ec._Tenantschema_tenanttoken(ctx, field, obj)
		case "tenantimage":
			out.Values[i] = ec._Tenantschema_tenantimage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessdataImplementors = []string{"businessdata"}

func (ec *executionContext) _businessdata(ctx context.Context, sel ast.SelectionSet, obj *model.Businessdata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessdataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("businessdata")
		case "status":
			out.Values[i] = ec._businessdata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._businessdata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._businessdata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated":
			out.Values[i] = ec._businessdata_updated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var chargetypeImplementors = []string{"chargetype"}

func (ec *executionContext) _chargetype(ctx context.Context, sel ast.SelectionSet, obj *model.Chargetype) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chargetypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("chargetype")
		case "Chargeid":
			out.Values[i] = ec._chargetype_Chargeid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Chargename":
			out.Values[i] = ec._chargetype_Chargename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._chargetype_Status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var chargetypedataImplementors = []string{"chargetypedata"}

func (ec *executionContext) _chargetypedata(ctx context.Context, sel ast.SelectionSet, obj *model.Chargetypedata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chargetypedataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("chargetypedata")
		case "status":
			out.Values[i] = ec._chargetypedata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._chargetypedata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._chargetypedata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "types":
			out.Values[i] = ec._chargetypedata_types(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deliverychargeImplementors = []string{"deliverycharge"}

func (ec *executionContext) _deliverycharge(ctx context.Context, sel ast.SelectionSet, obj *model.Deliverycharge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliverychargeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("deliverycharge")
		case "Settingsid":
			out.Values[i] = ec._deliverycharge_Settingsid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantid":
			out.Values[i] = ec._deliverycharge_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationid":
			out.Values[i] = ec._deliverycharge_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Slabtype":
			out.Values[i] = ec._deliverycharge_Slabtype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Slab":
			out.Values[i] = ec._deliverycharge_Slab(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Slablimit":
			out.Values[i] = ec._deliverycharge_Slablimit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Slabcharge":
			out.Values[i] = ec._deliverycharge_Slabcharge(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getBusinessdataImplementors = []string{"getBusinessdata"}

func (ec *executionContext) _getBusinessdata(ctx context.Context, sel ast.SelectionSet, obj *model.GetBusinessdata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBusinessdataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getBusinessdata")
		case "status":
			out.Values[i] = ec._getBusinessdata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._getBusinessdata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._getBusinessdata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "businessinfo":
			out.Values[i] = ec._getBusinessdata_businessinfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getalllocationsImplementors = []string{"getalllocations"}

func (ec *executionContext) _getalllocations(ctx context.Context, sel ast.SelectionSet, obj *model.Getalllocations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getalllocationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getalllocations")
		case "status":
			out.Values[i] = ec._getalllocations_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._getalllocations_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._getalllocations_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locations":
			out.Values[i] = ec._getalllocations_locations(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getallmoduledataImplementors = []string{"getallmoduledata"}

func (ec *executionContext) _getallmoduledata(ctx context.Context, sel ast.SelectionSet, obj *model.Getallmoduledata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getallmoduledataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getallmoduledata")
		case "status":
			out.Values[i] = ec._getallmoduledata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._getallmoduledata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._getallmoduledata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modules":
			out.Values[i] = ec._getallmoduledata_modules(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getallpromodataImplementors = []string{"getallpromodata"}

func (ec *executionContext) _getallpromodata(ctx context.Context, sel ast.SelectionSet, obj *model.Getallpromodata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getallpromodataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getallpromodata")
		case "status":
			out.Values[i] = ec._getallpromodata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._getallpromodata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._getallpromodata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "promos":
			out.Values[i] = ec._getallpromodata_promos(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getnonsubscribedcategorydataImplementors = []string{"getnonsubscribedcategorydata"}

func (ec *executionContext) _getnonsubscribedcategorydata(ctx context.Context, sel ast.SelectionSet, obj *model.Getnonsubscribedcategorydata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getnonsubscribedcategorydataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getnonsubscribedcategorydata")
		case "status":
			out.Values[i] = ec._getnonsubscribedcategorydata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._getnonsubscribedcategorydata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._getnonsubscribedcategorydata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category":
			out.Values[i] = ec._getnonsubscribedcategorydata_category(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getnonsubscribeddataImplementors = []string{"getnonsubscribeddata"}

func (ec *executionContext) _getnonsubscribeddata(ctx context.Context, sel ast.SelectionSet, obj *model.Getnonsubscribeddata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getnonsubscribeddataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getnonsubscribeddata")
		case "status":
			out.Values[i] = ec._getnonsubscribeddata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._getnonsubscribeddata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._getnonsubscribeddata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nonsubscribed":
			out.Values[i] = ec._getnonsubscribeddata_nonsubscribed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getpaymentdataImplementors = []string{"getpaymentdata"}

func (ec *executionContext) _getpaymentdata(ctx context.Context, sel ast.SelectionSet, obj *model.Getpaymentdata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getpaymentdataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getpaymentdata")
		case "status":
			out.Values[i] = ec._getpaymentdata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._getpaymentdata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._getpaymentdata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payments":
			out.Values[i] = ec._getpaymentdata_payments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getpromotiondataImplementors = []string{"getpromotiondata"}

func (ec *executionContext) _getpromotiondata(ctx context.Context, sel ast.SelectionSet, obj *model.Getpromotiondata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getpromotiondataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getpromotiondata")
		case "status":
			out.Values[i] = ec._getpromotiondata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._getpromotiondata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._getpromotiondata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "promotions":
			out.Values[i] = ec._getpromotiondata_promotions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getsubcategorydataImplementors = []string{"getsubcategorydata"}

func (ec *executionContext) _getsubcategorydata(ctx context.Context, sel ast.SelectionSet, obj *model.Getsubcategorydata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getsubcategorydataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getsubcategorydata")
		case "status":
			out.Values[i] = ec._getsubcategorydata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._getsubcategorydata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._getsubcategorydata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subcategories":
			out.Values[i] = ec._getsubcategorydata_subcategories(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getsubscriptionsdataImplementors = []string{"getsubscriptionsdata"}

func (ec *executionContext) _getsubscriptionsdata(ctx context.Context, sel ast.SelectionSet, obj *model.Getsubscriptionsdata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getsubscriptionsdataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getsubscriptionsdata")
		case "status":
			out.Values[i] = ec._getsubscriptionsdata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._getsubscriptionsdata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._getsubscriptionsdata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subscribed":
			out.Values[i] = ec._getsubscriptionsdata_subscribed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gettenantsubcategorydataImplementors = []string{"gettenantsubcategorydata"}

func (ec *executionContext) _gettenantsubcategorydata(ctx context.Context, sel ast.SelectionSet, obj *model.Gettenantsubcategorydata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gettenantsubcategorydataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("gettenantsubcategorydata")
		case "status":
			out.Values[i] = ec._gettenantsubcategorydata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._gettenantsubcategorydata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._gettenantsubcategorydata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tenantsubcategories":
			out.Values[i] = ec._gettenantsubcategorydata_tenantsubcategories(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var infoImplementors = []string{"info"}

func (ec *executionContext) _info(ctx context.Context, sel ast.SelectionSet, obj *model.Info) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, infoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("info")
		case "tenantid":
			out.Values[i] = ec._info_tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moduleid":
			out.Values[i] = ec._info_moduleid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modulename":
			out.Values[i] = ec._info_modulename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "brandname":
			out.Values[i] = ec._info_brandname(ctx, field, obj)
		case "about":
			out.Values[i] = ec._info_about(ctx, field, obj)
		case "email":
			out.Values[i] = ec._info_email(ctx, field, obj)
		case "phone":
			out.Values[i] = ec._info_phone(ctx, field, obj)
		case "address":
			out.Values[i] = ec._info_address(ctx, field, obj)
		case "cod":
			out.Values[i] = ec._info_cod(ctx, field, obj)
		case "digital":
			out.Values[i] = ec._info_digital(ctx, field, obj)
		case "tenantaccid":
			out.Values[i] = ec._info_tenantaccid(ctx, field, obj)
		case "tenanttoken":
			out.Values[i] = ec._info_tenanttoken(ctx, field, obj)
		case "tenantimage":
			out.Values[i] = ec._info_tenantimage(ctx, field, obj)
		case "countrycode":
			out.Values[i] = ec._info_countrycode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currencycode":
			out.Values[i] = ec._info_currencycode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currencysymbol":
			out.Values[i] = ec._info_currencysymbol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "social":
			out.Values[i] = ec._info_social(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationbyiddataImplementors = []string{"locationbyiddata"}

func (ec *executionContext) _locationbyiddata(ctx context.Context, sel ast.SelectionSet, obj *model.Locationbyiddata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationbyiddataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("locationbyiddata")
		case "status":
			out.Values[i] = ec._locationbyiddata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._locationbyiddata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._locationbyiddata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locationdata":
			out.Values[i] = ec._locationbyiddata_locationdata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationdataImplementors = []string{"locationdata"}

func (ec *executionContext) _locationdata(ctx context.Context, sel ast.SelectionSet, obj *model.Locationdata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationdataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("locationdata")
		case "status":
			out.Values[i] = ec._locationdata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._locationdata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._locationdata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locationinfo":
			out.Values[i] = ec._locationdata_locationinfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationgetallImplementors = []string{"locationgetall"}

func (ec *executionContext) _locationgetall(ctx context.Context, sel ast.SelectionSet, obj *model.Locationgetall) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationgetallImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("locationgetall")
		case "locationid":
			out.Values[i] = ec._locationgetall_locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locationName":
			out.Values[i] = ec._locationgetall_locationName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tenantid":
			out.Values[i] = ec._locationgetall_tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._locationgetall_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contact":
			out.Values[i] = ec._locationgetall_contact(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":
			out.Values[i] = ec._locationgetall_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suburb":
			out.Values[i] = ec._locationgetall_suburb(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city":
			out.Values[i] = ec._locationgetall_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":
			out.Values[i] = ec._locationgetall_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postcode":
			out.Values[i] = ec._locationgetall_postcode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countycode":
			out.Values[i] = ec._locationgetall_countycode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "latitude":
			out.Values[i] = ec._locationgetall_latitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "longitude":
			out.Values[i] = ec._locationgetall_longitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "openingtime":
			out.Values[i] = ec._locationgetall_openingtime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "closingtime":
			out.Values[i] = ec._locationgetall_closingtime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delivery":
			out.Values[i] = ec._locationgetall_delivery(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deliverytype":
			out.Values[i] = ec._locationgetall_deliverytype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deliverymins":
			out.Values[i] = ec._locationgetall_deliverymins(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._locationgetall_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdby":
			out.Values[i] = ec._locationgetall_createdby(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tenantusers":
			out.Values[i] = ec._locationgetall_tenantusers(ctx, field, obj)
		case "othercharges":
			out.Values[i] = ec._locationgetall_othercharges(ctx, field, obj)
		case "deliverycharges":
			out.Values[i] = ec._locationgetall_deliverycharges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var modImplementors = []string{"mod"}

func (ec *executionContext) _mod(ctx context.Context, sel ast.SelectionSet, obj *model.Mod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("mod")
		case "Moduleid":
			out.Values[i] = ec._mod_Moduleid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Categoryid":
			out.Values[i] = ec._mod_Categoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subcategoryid":
			out.Values[i] = ec._mod_Subcategoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subcategoryname":
			out.Values[i] = ec._mod_Subcategoryname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Modulename":
			out.Values[i] = ec._mod_Modulename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Baseprice":
			out.Values[i] = ec._mod_Baseprice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Taxpercent":
			out.Values[i] = ec._mod_Taxpercent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Taxamount":
			out.Values[i] = ec._mod_Taxamount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Amount":
			out.Values[i] = ec._mod_Amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Content":
			out.Values[i] = ec._mod_Content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Logourl":
			out.Values[i] = ec._mod_Logourl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Iconurl":
			out.Values[i] = ec._mod_Iconurl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var otherchargeImplementors = []string{"othercharge"}

func (ec *executionContext) _othercharge(ctx context.Context, sel ast.SelectionSet, obj *model.Othercharge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, otherchargeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("othercharge")
		case "Tenantchargeid":
			out.Values[i] = ec._othercharge_Tenantchargeid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantid":
			out.Values[i] = ec._othercharge_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationid":
			out.Values[i] = ec._othercharge_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Chargeid":
			out.Values[i] = ec._othercharge_Chargeid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Chargename":
			out.Values[i] = ec._othercharge_Chargename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Chargetype":
			out.Values[i] = ec._othercharge_Chargetype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Chargevalue":
			out.Values[i] = ec._othercharge_Chargevalue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentdataImplementors = []string{"paymentdata"}

func (ec *executionContext) _paymentdata(ctx context.Context, sel ast.SelectionSet, obj *model.Paymentdata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentdataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("paymentdata")
		case "Paymentid":
			out.Values[i] = ec._paymentdata_Paymentid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Moduleid":
			out.Values[i] = ec._paymentdata_Moduleid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationid":
			out.Values[i] = ec._paymentdata_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantid":
			out.Values[i] = ec._paymentdata_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Paymentref":
			out.Values[i] = ec._paymentdata_Paymentref(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Paymenttypeid":
			out.Values[i] = ec._paymentdata_Paymenttypeid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Customerid":
			out.Values[i] = ec._paymentdata_Customerid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Transactiondate":
			out.Values[i] = ec._paymentdata_Transactiondate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Orderid":
			out.Values[i] = ec._paymentdata_Orderid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Chargeid":
			out.Values[i] = ec._paymentdata_Chargeid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Amount":
			out.Values[i] = ec._paymentdata_Amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Refundamt":
			out.Values[i] = ec._paymentdata_Refundamt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Paymentstatus":
			out.Values[i] = ec._paymentdata_Paymentstatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Created":
			out.Values[i] = ec._paymentdata_Created(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Paymentdetails":
			out.Values[i] = ec._paymentdata_Paymentdetails(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentdetaildataImplementors = []string{"paymentdetaildata"}

func (ec *executionContext) _paymentdetaildata(ctx context.Context, sel ast.SelectionSet, obj *model.Paymentdetaildata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentdetaildataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("paymentdetaildata")
		case "Paymentdetailid":
			out.Values[i] = ec._paymentdetaildata_Paymentdetailid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Paymentid":
			out.Values[i] = ec._paymentdetaildata_Paymentid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Moduleid":
			out.Values[i] = ec._paymentdetaildata_Moduleid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationid":
			out.Values[i] = ec._paymentdetaildata_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantid":
			out.Values[i] = ec._paymentdetaildata_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Orderid":
			out.Values[i] = ec._paymentdetaildata_Orderid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subscriptionid":
			out.Values[i] = ec._paymentdetaildata_Subscriptionid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Amount":
			out.Values[i] = ec._paymentdetaildata_Amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Taxpercent":
			out.Values[i] = ec._paymentdetaildata_Taxpercent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Taxamount":
			out.Values[i] = ec._paymentdetaildata_Taxamount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Payamount":
			out.Values[i] = ec._paymentdetaildata_Payamount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Customerinfo":
			out.Values[i] = ec._paymentdetaildata_Customerinfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var promoImplementors = []string{"promo"}

func (ec *executionContext) _promo(ctx context.Context, sel ast.SelectionSet, obj *model.Promo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, promoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("promo")
		case "Promocodeid":
			out.Values[i] = ec._promo_Promocodeid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Moduleid":
			out.Values[i] = ec._promo_Moduleid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Partnerid":
			out.Values[i] = ec._promo_Partnerid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Packageid":
			out.Values[i] = ec._promo_Packageid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promoname":
			out.Values[i] = ec._promo_Promoname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promodescription":
			out.Values[i] = ec._promo_Promodescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Packageexpiry":
			out.Values[i] = ec._promo_Packageexpiry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promotype":
			out.Values[i] = ec._promo_Promotype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Promovalue":
			out.Values[i] = ec._promo_Promovalue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Validity":
			out.Values[i] = ec._promo_Validity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Validitystatus":
			out.Values[i] = ec._promo_Validitystatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Companyname":
			out.Values[i] = ec._promo_Companyname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Address":
			out.Values[i] = ec._promo_Address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "City":
			out.Values[i] = ec._promo_City(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Postcode":
			out.Values[i] = ec._promo_Postcode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var promotioncreateddataImplementors = []string{"promotioncreateddata"}

func (ec *executionContext) _promotioncreateddata(ctx context.Context, sel ast.SelectionSet, obj *model.Promotioncreateddata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, promotioncreateddataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("promotioncreateddata")
		case "status":
			out.Values[i] = ec._promotioncreateddata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._promotioncreateddata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._promotioncreateddata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var promotypesdataImplementors = []string{"promotypesdata"}

func (ec *executionContext) _promotypesdata(ctx context.Context, sel ast.SelectionSet, obj *model.Promotypesdata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, promotypesdataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("promotypesdata")
		case "status":
			out.Values[i] = ec._promotypesdata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._promotypesdata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._promotypesdata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "types":
			out.Values[i] = ec._promotypesdata_types(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resultImplementors = []string{"result"}

func (ec *executionContext) _result(ctx context.Context, sel ast.SelectionSet, obj *model.Result) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("result")
		case "status":
			out.Values[i] = ec._result_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._result_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._result_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var socialinfoImplementors = []string{"socialinfo"}

func (ec *executionContext) _socialinfo(ctx context.Context, sel ast.SelectionSet, obj *model.Socialinfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, socialinfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("socialinfo")
		case "socialid":
			out.Values[i] = ec._socialinfo_socialid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "socialprofile":
			out.Values[i] = ec._socialinfo_socialprofile(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dailcode":
			out.Values[i] = ec._socialinfo_dailcode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sociallink":
			out.Values[i] = ec._socialinfo_sociallink(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "socialicon":
			out.Values[i] = ec._socialinfo_socialicon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffdetailImplementors = []string{"staffdetail"}

func (ec *executionContext) _staffdetail(ctx context.Context, sel ast.SelectionSet, obj *model.Staffdetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffdetailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("staffdetail")
		case "Staffdetailid":
			out.Values[i] = ec._staffdetail_Staffdetailid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenanatstaffid":
			out.Values[i] = ec._staffdetail_Tenanatstaffid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantid":
			out.Values[i] = ec._staffdetail_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationid":
			out.Values[i] = ec._staffdetail_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationdetails":
			out.Values[i] = ec._staffdetail_Locationdetails(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stafflocationImplementors = []string{"stafflocation"}

func (ec *executionContext) _stafflocation(ctx context.Context, sel ast.SelectionSet, obj *model.Stafflocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stafflocationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("stafflocation")
		case "Locationid":
			out.Values[i] = ec._stafflocation_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationname":
			out.Values[i] = ec._stafflocation_Locationname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Email":
			out.Values[i] = ec._stafflocation_Email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Contact":
			out.Values[i] = ec._stafflocation_Contact(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Address":
			out.Values[i] = ec._stafflocation_Address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "City":
			out.Values[i] = ec._stafflocation_City(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Postcode":
			out.Values[i] = ec._stafflocation_Postcode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subcatImplementors = []string{"subcat"}

func (ec *executionContext) _subcat(ctx context.Context, sel ast.SelectionSet, obj *model.Subcat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subcatImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subcat")
		case "Subcategoryname":
			out.Values[i] = ec._subcat_Subcategoryname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subcategoryid":
			out.Values[i] = ec._subcat_Subcategoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Categoryid":
			out.Values[i] = ec._subcat_Categoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._subcat_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Icon":
			out.Values[i] = ec._subcat_Icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscribedDataImplementors = []string{"subscribedData"}

func (ec *executionContext) _subscribedData(ctx context.Context, sel ast.SelectionSet, obj *model.SubscribedData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscribedDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscribedData")
		case "status":
			out.Values[i] = ec._subscribedData_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._subscribedData_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._subscribedData_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "info":
			out.Values[i] = ec._subscribedData_info(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscribedDataResponseImplementors = []string{"subscribedDataResponse"}

func (ec *executionContext) _subscribedDataResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SubscribedDataResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscribedDataResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscribedDataResponse")
		case "status":
			out.Values[i] = ec._subscribedDataResponse_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._subscribedDataResponse_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._subscribedDataResponse_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "info":
			out.Values[i] = ec._subscribedDataResponse_info(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionsdataImplementors = []string{"subscriptionsdata"}

func (ec *executionContext) _subscriptionsdata(ctx context.Context, sel ast.SelectionSet, obj *model.Subscriptionsdata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionsdataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscriptionsdata")
		case "Subscriptionid":
			out.Values[i] = ec._subscriptionsdata_Subscriptionid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Packageid":
			out.Values[i] = ec._subscriptionsdata_Packageid(ctx, field, obj)
		case "Moduleid":
			out.Values[i] = ec._subscriptionsdata_Moduleid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Featureid":
			out.Values[i] = ec._subscriptionsdata_Featureid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantid":
			out.Values[i] = ec._subscriptionsdata_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Categoryid":
			out.Values[i] = ec._subscriptionsdata_Categoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subcategoryid":
			out.Values[i] = ec._subscriptionsdata_Subcategoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Validitydate":
			out.Values[i] = ec._subscriptionsdata_Validitydate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Validity":
			out.Values[i] = ec._subscriptionsdata_Validity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Modulename":
			out.Values[i] = ec._subscriptionsdata_Modulename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subscriptionaccid":
			out.Values[i] = ec._subscriptionsdata_Subscriptionaccid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subscriptionmethodid":
			out.Values[i] = ec._subscriptionsdata_Subscriptionmethodid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Paymentstatus":
			out.Values[i] = ec._subscriptionsdata_Paymentstatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Packagename":
			out.Values[i] = ec._subscriptionsdata_Packagename(ctx, field, obj)
		case "LogoUrl":
			out.Values[i] = ec._subscriptionsdata_LogoUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Iconurl":
			out.Values[i] = ec._subscriptionsdata_Iconurl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PackageIcon":
			out.Values[i] = ec._subscriptionsdata_PackageIcon(ctx, field, obj)
		case "PackageAmount":
			out.Values[i] = ec._subscriptionsdata_PackageAmount(ctx, field, obj)
		case "TotalAmount":
			out.Values[i] = ec._subscriptionsdata_TotalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Taxamount":
			out.Values[i] = ec._subscriptionsdata_Taxamount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantaccid":
			out.Values[i] = ec._subscriptionsdata_Tenantaccid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Customercount":
			out.Values[i] = ec._subscriptionsdata_Customercount(ctx, field, obj)
		case "Locationcount":
			out.Values[i] = ec._subscriptionsdata_Locationcount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tenantsubcatImplementors = []string{"tenantsubcat"}

func (ec *executionContext) _tenantsubcat(ctx context.Context, sel ast.SelectionSet, obj *model.Tenantsubcat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantsubcatImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("tenantsubcat")
		case "Categoryid":
			out.Values[i] = ec._tenantsubcat_Categoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subcategoryid":
			out.Values[i] = ec._tenantsubcat_Subcategoryid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subcategoryname":
			out.Values[i] = ec._tenantsubcat_Subcategoryname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Icon":
			out.Values[i] = ec._tenantsubcat_Icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Selected":
			out.Values[i] = ec._tenantsubcat_Selected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Categoryname":
			out.Values[i] = ec._tenantsubcat_Categoryname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tenantupdatedataImplementors = []string{"tenantupdatedata"}

func (ec *executionContext) _tenantupdatedata(ctx context.Context, sel ast.SelectionSet, obj *model.Tenantupdatedata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantupdatedataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("tenantupdatedata")
		case "status":
			out.Values[i] = ec._tenantupdatedata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._tenantupdatedata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._tenantupdatedata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated":
			out.Values[i] = ec._tenantupdatedata_updated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tenantuserdataImplementors = []string{"tenantuserdata"}

func (ec *executionContext) _tenantuserdata(ctx context.Context, sel ast.SelectionSet, obj *model.Tenantuserdata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantuserdataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("tenantuserdata")
		case "status":
			out.Values[i] = ec._tenantuserdata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._tenantuserdata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._tenantuserdata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tenantuser":
			out.Values[i] = ec._tenantuserdata_tenantuser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var typedataImplementors = []string{"typedata"}

func (ec *executionContext) _typedata(ctx context.Context, sel ast.SelectionSet, obj *model.Typedata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, typedataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("typedata")
		case "Promotiontypeid":
			out.Values[i] = ec._typedata_Promotiontypeid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Typename":
			out.Values[i] = ec._typedata_Typename(ctx, field, obj)
		case "Tag":
			out.Values[i] = ec._typedata_Tag(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"user"}

func (ec *executionContext) _user(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("user")
		case "userid":
			out.Values[i] = ec._user_userid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userfromtenantImplementors = []string{"userfromtenant"}

func (ec *executionContext) _userfromtenant(ctx context.Context, sel ast.SelectionSet, obj *model.Userfromtenant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userfromtenantImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("userfromtenant")
		case "Tenantid":
			out.Values[i] = ec._userfromtenant_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Userid":
			out.Values[i] = ec._userfromtenant_Userid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Firstname":
			out.Values[i] = ec._userfromtenant_Firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Lastname":
			out.Values[i] = ec._userfromtenant_Lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Email":
			out.Values[i] = ec._userfromtenant_Email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Contact":
			out.Values[i] = ec._userfromtenant_Contact(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Profileimage":
			out.Values[i] = ec._userfromtenant_Profileimage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationid":
			out.Values[i] = ec._userfromtenant_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationname":
			out.Values[i] = ec._userfromtenant_Locationname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userinfodataImplementors = []string{"userinfodata"}

func (ec *executionContext) _userinfodata(ctx context.Context, sel ast.SelectionSet, obj *model.Userinfodata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userinfodataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("userinfodata")
		case "Profileid":
			out.Values[i] = ec._userinfodata_Profileid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Userid":
			out.Values[i] = ec._userinfodata_Userid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationid":
			out.Values[i] = ec._userinfodata_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Firstname":
			out.Values[i] = ec._userinfodata_Firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Lastname":
			out.Values[i] = ec._userinfodata_Lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Email":
			out.Values[i] = ec._userinfodata_Email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Contact":
			out.Values[i] = ec._userinfodata_Contact(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Profileimage":
			out.Values[i] = ec._userinfodata_Profileimage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userlistImplementors = []string{"userlist"}

func (ec *executionContext) _userlist(ctx context.Context, sel ast.SelectionSet, obj *model.Userlist) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userlistImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("userlist")
		case "Tenantstaffid":
			out.Values[i] = ec._userlist_Tenantstaffid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantid":
			out.Values[i] = ec._userlist_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Moduleid":
			out.Values[i] = ec._userlist_Moduleid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Userid":
			out.Values[i] = ec._userlist_Userid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Userinfo":
			out.Values[i] = ec._userlist_Userinfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usersdataImplementors = []string{"usersdata"}

func (ec *executionContext) _usersdata(ctx context.Context, sel ast.SelectionSet, obj *model.Usersdata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usersdataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("usersdata")
		case "status":
			out.Values[i] = ec._usersdata_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._usersdata_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":
			out.Values[i] = ec._usersdata_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "users":
			out.Values[i] = ec._usersdata_users(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usertenantImplementors = []string{"usertenant"}

func (ec *executionContext) _usertenant(ctx context.Context, sel ast.SelectionSet, obj *model.Usertenant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usertenantImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("usertenant")
		case "Staffdetailid":
			out.Values[i] = ec._usertenant_Staffdetailid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenanatstaffid":
			out.Values[i] = ec._usertenant_Tenanatstaffid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantid":
			out.Values[i] = ec._usertenant_Tenantid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Locationid":
			out.Values[i] = ec._usertenant_Locationid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Tenantusers":
			out.Values[i] = ec._usertenant_Tenantusers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCat2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐCat(ctx context.Context, sel ast.SelectionSet, v []*model.Cat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCat2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐCat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLocationInfo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationInfo(ctx context.Context, sel ast.SelectionSet, v *model.LocationInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LocationInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPackage2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPackage(ctx context.Context, sel ast.SelectionSet, v []*model.Package) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPackage2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPackage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSparkle2githubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSparkle(ctx context.Context, sel ast.SelectionSet, v model.Sparkle) graphql.Marshaler {
	return ec._Sparkle(ctx, sel, &v)
}

func (ec *executionContext) marshalNSparkle2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSparkle(ctx context.Context, sel ast.SelectionSet, v *model.Sparkle) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Sparkle(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNTenantData2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantData(ctx context.Context, sel ast.SelectionSet, v []*model.TenantData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTenantData2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNdata2githubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐData(ctx context.Context, v interface{}) (model.Data, error) {
	res, err := ec.unmarshalInputdata(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsubcat2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcat(ctx context.Context, sel ast.SelectionSet, v []*model.Subcat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubcat2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNuser2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._user(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCat2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐCat(ctx context.Context, sel ast.SelectionSet, v []*model.Cat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCat2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐCat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCat2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐCat(ctx context.Context, sel ast.SelectionSet, v *model.Cat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Cat(ctx, sel, v)
}

func (ec *executionContext) marshalOCustinfo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐCustinfo(ctx context.Context, sel ast.SelectionSet, v *model.Custinfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Custinfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOPackage2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPackage(ctx context.Context, sel ast.SelectionSet, v []*model.Package) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPackage2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPackage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPackage2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPackage(ctx context.Context, sel ast.SelectionSet, v *model.Package) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Package(ctx, sel, v)
}

func (ec *executionContext) marshalOPromotion2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotion(ctx context.Context, sel ast.SelectionSet, v []*model.Promotion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPromotion2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPromotion2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotion(ctx context.Context, sel ast.SelectionSet, v *model.Promotion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Promotion(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTenantAddress2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantAddress(ctx context.Context, v interface{}) (*model.TenantAddress, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTenantAddress(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTenantData2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantData(ctx context.Context, sel ast.SelectionSet, v *model.TenantData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TenantData(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTenantDetails2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantDetails(ctx context.Context, v interface{}) (*model.TenantDetails, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTenantDetails(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalObusiness2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐBusiness(ctx context.Context, v interface{}) (*model.Business, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbusiness(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObusinessdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐBusinessdata(ctx context.Context, sel ast.SelectionSet, v *model.Businessdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._businessdata(ctx, sel, v)
}

func (ec *executionContext) unmarshalObusinessupdatedata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐBusinessupdatedata(ctx context.Context, v interface{}) (*model.Businessupdatedata, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbusinessupdatedata(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchargecreate2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargecreate(ctx context.Context, v interface{}) (*model.Chargecreate, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchargecreate(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchargecreateinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargecreateinput(ctx context.Context, v interface{}) ([]*model.Chargecreateinput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Chargecreateinput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOchargecreateinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargecreateinput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOchargecreateinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargecreateinput(ctx context.Context, v interface{}) (*model.Chargecreateinput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchargecreateinput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOchargetype2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargetype(ctx context.Context, sel ast.SelectionSet, v []*model.Chargetype) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOchargetype2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargetype(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOchargetype2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargetype(ctx context.Context, sel ast.SelectionSet, v *model.Chargetype) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._chargetype(ctx, sel, v)
}

func (ec *executionContext) marshalOchargetypedata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargetypedata(ctx context.Context, sel ast.SelectionSet, v *model.Chargetypedata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._chargetypedata(ctx, sel, v)
}

func (ec *executionContext) unmarshalOchargeupdate2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargeupdate(ctx context.Context, v interface{}) (*model.Chargeupdate, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchargeupdate(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchargeupdateinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargeupdateinput(ctx context.Context, v interface{}) ([]*model.Chargeupdateinput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Chargeupdateinput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOchargeupdateinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargeupdateinput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOchargeupdateinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐChargeupdateinput(ctx context.Context, v interface{}) (*model.Chargeupdateinput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchargeupdateinput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdeliverycharge2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDeliverycharge(ctx context.Context, sel ast.SelectionSet, v []*model.Deliverycharge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOdeliverycharge2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDeliverycharge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOdeliverycharge2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDeliverycharge(ctx context.Context, sel ast.SelectionSet, v *model.Deliverycharge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._deliverycharge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdeliverychargeinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDeliverychargeinput(ctx context.Context, v interface{}) ([]*model.Deliverychargeinput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Deliverychargeinput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdeliverychargeinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDeliverychargeinput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdeliverychargeinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDeliverychargeinput(ctx context.Context, v interface{}) (*model.Deliverychargeinput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdeliverychargeinput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdelstatus2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDelstatus(ctx context.Context, v interface{}) ([]*model.Delstatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Delstatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdelstatus2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDelstatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdelstatus2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐDelstatus(ctx context.Context, v interface{}) (*model.Delstatus, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdelstatus(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOgetBusinessdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetBusinessdata(ctx context.Context, sel ast.SelectionSet, v *model.GetBusinessdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._getBusinessdata(ctx, sel, v)
}

func (ec *executionContext) marshalOgetalllocations2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetalllocations(ctx context.Context, sel ast.SelectionSet, v *model.Getalllocations) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._getalllocations(ctx, sel, v)
}

func (ec *executionContext) marshalOgetallmoduledata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetallmoduledata(ctx context.Context, sel ast.SelectionSet, v *model.Getallmoduledata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._getallmoduledata(ctx, sel, v)
}

func (ec *executionContext) marshalOgetallpromodata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetallpromodata(ctx context.Context, sel ast.SelectionSet, v *model.Getallpromodata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._getallpromodata(ctx, sel, v)
}

func (ec *executionContext) marshalOgetnonsubscribedcategorydata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetnonsubscribedcategorydata(ctx context.Context, sel ast.SelectionSet, v *model.Getnonsubscribedcategorydata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._getnonsubscribedcategorydata(ctx, sel, v)
}

func (ec *executionContext) marshalOgetnonsubscribeddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetnonsubscribeddata(ctx context.Context, sel ast.SelectionSet, v *model.Getnonsubscribeddata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._getnonsubscribeddata(ctx, sel, v)
}

func (ec *executionContext) marshalOgetpaymentdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetpaymentdata(ctx context.Context, sel ast.SelectionSet, v *model.Getpaymentdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._getpaymentdata(ctx, sel, v)
}

func (ec *executionContext) marshalOgetpromotiondata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetpromotiondata(ctx context.Context, sel ast.SelectionSet, v *model.Getpromotiondata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._getpromotiondata(ctx, sel, v)
}

func (ec *executionContext) marshalOgetsubcategorydata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetsubcategorydata(ctx context.Context, sel ast.SelectionSet, v *model.Getsubcategorydata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._getsubcategorydata(ctx, sel, v)
}

func (ec *executionContext) marshalOgetsubscriptionsdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGetsubscriptionsdata(ctx context.Context, sel ast.SelectionSet, v *model.Getsubscriptionsdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._getsubscriptionsdata(ctx, sel, v)
}

func (ec *executionContext) marshalOgettenantsubcategorydata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐGettenantsubcategorydata(ctx context.Context, sel ast.SelectionSet, v *model.Gettenantsubcategorydata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._gettenantsubcategorydata(ctx, sel, v)
}

func (ec *executionContext) marshalOinfo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐInfo(ctx context.Context, sel ast.SelectionSet, v *model.Info) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._info(ctx, sel, v)
}

func (ec *executionContext) unmarshalOinitialsubscribe2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐInitialsubscribe(ctx context.Context, v interface{}) ([]*model.Initialsubscribe, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Initialsubscribe, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOinitialsubscribe2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐInitialsubscribe(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOinitialsubscribe2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐInitialsubscribe(ctx context.Context, v interface{}) (*model.Initialsubscribe, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputinitialsubscribe(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOlocation2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocation(ctx context.Context, v interface{}) (*model.Location, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputlocation(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOlocationbyiddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationbyiddata(ctx context.Context, sel ast.SelectionSet, v *model.Locationbyiddata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._locationbyiddata(ctx, sel, v)
}

func (ec *executionContext) marshalOlocationdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationdata(ctx context.Context, sel ast.SelectionSet, v *model.Locationdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._locationdata(ctx, sel, v)
}

func (ec *executionContext) marshalOlocationgetall2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationgetall(ctx context.Context, sel ast.SelectionSet, v []*model.Locationgetall) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOlocationgetall2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationgetall(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOlocationgetall2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationgetall(ctx context.Context, sel ast.SelectionSet, v *model.Locationgetall) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._locationgetall(ctx, sel, v)
}

func (ec *executionContext) unmarshalOlocationstatusinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationstatusinput(ctx context.Context, v interface{}) (*model.Locationstatusinput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputlocationstatusinput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOlocationupdate2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocationupdate(ctx context.Context, v interface{}) (*model.Locationupdate, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputlocationupdate(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOlocstatus2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocstatus(ctx context.Context, v interface{}) ([]*model.Locstatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Locstatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOlocstatus2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocstatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOlocstatus2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐLocstatus(ctx context.Context, v interface{}) (*model.Locstatus, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputlocstatus(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOmod2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐMod(ctx context.Context, sel ast.SelectionSet, v []*model.Mod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOmod2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐMod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOmod2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐMod(ctx context.Context, sel ast.SelectionSet, v *model.Mod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._mod(ctx, sel, v)
}

func (ec *executionContext) marshalOothercharge2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐOthercharge(ctx context.Context, sel ast.SelectionSet, v []*model.Othercharge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOothercharge2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐOthercharge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOothercharge2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐOthercharge(ctx context.Context, sel ast.SelectionSet, v *model.Othercharge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._othercharge(ctx, sel, v)
}

func (ec *executionContext) marshalOpaymentdata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPaymentdata(ctx context.Context, sel ast.SelectionSet, v []*model.Paymentdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOpaymentdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPaymentdata(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOpaymentdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPaymentdata(ctx context.Context, sel ast.SelectionSet, v *model.Paymentdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._paymentdata(ctx, sel, v)
}

func (ec *executionContext) marshalOpaymentdetaildata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPaymentdetaildata(ctx context.Context, sel ast.SelectionSet, v []*model.Paymentdetaildata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOpaymentdetaildata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPaymentdetaildata(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOpaymentdetaildata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPaymentdetaildata(ctx context.Context, sel ast.SelectionSet, v *model.Paymentdetaildata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._paymentdetaildata(ctx, sel, v)
}

func (ec *executionContext) marshalOpromo2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromo(ctx context.Context, sel ast.SelectionSet, v []*model.Promo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOpromo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOpromo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromo(ctx context.Context, sel ast.SelectionSet, v *model.Promo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._promo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOpromoinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromoinput(ctx context.Context, v interface{}) (*model.Promoinput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputpromoinput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpromotioncreateddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotioncreateddata(ctx context.Context, sel ast.SelectionSet, v *model.Promotioncreateddata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._promotioncreateddata(ctx, sel, v)
}

func (ec *executionContext) marshalOpromotypesdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐPromotypesdata(ctx context.Context, sel ast.SelectionSet, v *model.Promotypesdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._promotypesdata(ctx, sel, v)
}

func (ec *executionContext) marshalOresult2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐResult(ctx context.Context, sel ast.SelectionSet, v *model.Result) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._result(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsocialadddata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialadddata(ctx context.Context, v interface{}) ([]*model.Socialadddata, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Socialadddata, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsocialadddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialadddata(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsocialadddata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialadddata(ctx context.Context, v interface{}) (*model.Socialadddata, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsocialadddata(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsocialinfo2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialinfo(ctx context.Context, sel ast.SelectionSet, v []*model.Socialinfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsocialinfo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialinfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOsocialinfo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialinfo(ctx context.Context, sel ast.SelectionSet, v *model.Socialinfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._socialinfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsocialupdatedata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialupdatedata(ctx context.Context, v interface{}) ([]*model.Socialupdatedata, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Socialupdatedata, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsocialupdatedata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialupdatedata(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsocialupdatedata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSocialupdatedata(ctx context.Context, v interface{}) (*model.Socialupdatedata, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsocialupdatedata(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOstafflocation2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐStafflocation(ctx context.Context, sel ast.SelectionSet, v *model.Stafflocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._stafflocation(ctx, sel, v)
}

func (ec *executionContext) marshalOsubcat2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcat(ctx context.Context, sel ast.SelectionSet, v []*model.Subcat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubcat2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOsubcat2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcat(ctx context.Context, sel ast.SelectionSet, v *model.Subcat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._subcat(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsubcatinsertdata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcatinsertdata(ctx context.Context, v interface{}) ([]*model.Subcatinsertdata, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Subcatinsertdata, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubcatinsertdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcatinsertdata(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsubcatinsertdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubcatinsertdata(ctx context.Context, v interface{}) (*model.Subcatinsertdata, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubcatinsertdata(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscribedData2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscribedData(ctx context.Context, sel ast.SelectionSet, v *model.SubscribedData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._subscribedData(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsubscribemoreinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscribemoreinput(ctx context.Context, v interface{}) ([]*model.Subscribemoreinput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Subscribemoreinput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscribemoreinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscribemoreinput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsubscribemoreinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscribemoreinput(ctx context.Context, v interface{}) (*model.Subscribemoreinput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubscribemoreinput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsubscriptionnew2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscriptionnew(ctx context.Context, v interface{}) ([]*model.Subscriptionnew, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Subscriptionnew, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsubscriptionnew2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscriptionnew(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsubscriptionnew2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscriptionnew(ctx context.Context, v interface{}) (*model.Subscriptionnew, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsubscriptionnew(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsubscriptionsdata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscriptionsdata(ctx context.Context, sel ast.SelectionSet, v []*model.Subscriptionsdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOsubscriptionsdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscriptionsdata(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOsubscriptionsdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐSubscriptionsdata(ctx context.Context, sel ast.SelectionSet, v *model.Subscriptionsdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._subscriptionsdata(ctx, sel, v)
}

func (ec *executionContext) marshalOtenantsubcat2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantsubcat(ctx context.Context, sel ast.SelectionSet, v []*model.Tenantsubcat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOtenantsubcat2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantsubcat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOtenantsubcat2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantsubcat(ctx context.Context, sel ast.SelectionSet, v *model.Tenantsubcat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._tenantsubcat(ctx, sel, v)
}

func (ec *executionContext) marshalOtenantupdatedata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantupdatedata(ctx context.Context, sel ast.SelectionSet, v *model.Tenantupdatedata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._tenantupdatedata(ctx, sel, v)
}

func (ec *executionContext) unmarshalOtenantuser2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantuser(ctx context.Context, v interface{}) (*model.Tenantuser, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtenantuser(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtenantuserdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTenantuserdata(ctx context.Context, sel ast.SelectionSet, v *model.Tenantuserdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._tenantuserdata(ctx, sel, v)
}

func (ec *executionContext) marshalOtypedata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTypedata(ctx context.Context, sel ast.SelectionSet, v []*model.Typedata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOtypedata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTypedata(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOtypedata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐTypedata(ctx context.Context, sel ast.SelectionSet, v *model.Typedata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._typedata(ctx, sel, v)
}

func (ec *executionContext) unmarshalOupdatedelivery2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdatedelivery(ctx context.Context, v interface{}) (*model.Updatedelivery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdatedelivery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdatedeliverychargeinput2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdatedeliverychargeinput(ctx context.Context, v interface{}) ([]*model.Updatedeliverychargeinput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.Updatedeliverychargeinput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOupdatedeliverychargeinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdatedeliverychargeinput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOupdatedeliverychargeinput2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdatedeliverychargeinput(ctx context.Context, v interface{}) (*model.Updatedeliverychargeinput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdatedeliverychargeinput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateinfo2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdateinfo(ctx context.Context, v interface{}) (*model.Updateinfo, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateinfo(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdateother2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdateother(ctx context.Context, v interface{}) (*model.Updateother, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdateother(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOupdatetenant2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUpdatetenant(ctx context.Context, v interface{}) (*model.Updatetenant, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputupdatetenant(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOuserfromtenant2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserfromtenant(ctx context.Context, sel ast.SelectionSet, v []*model.Userfromtenant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOuserfromtenant2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserfromtenant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOuserfromtenant2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserfromtenant(ctx context.Context, sel ast.SelectionSet, v *model.Userfromtenant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._userfromtenant(ctx, sel, v)
}

func (ec *executionContext) marshalOuserinfodata2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserinfodata(ctx context.Context, sel ast.SelectionSet, v []*model.Userinfodata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOuserinfodata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserinfodata(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOuserinfodata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserinfodata(ctx context.Context, sel ast.SelectionSet, v *model.Userinfodata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._userinfodata(ctx, sel, v)
}

func (ec *executionContext) marshalOuserlist2ᚕᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserlist(ctx context.Context, sel ast.SelectionSet, v []*model.Userlist) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOuserlist2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserlist(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOuserlist2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUserlist(ctx context.Context, sel ast.SelectionSet, v *model.Userlist) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._userlist(ctx, sel, v)
}

func (ec *executionContext) marshalOusersdata2ᚖgithubᚗcomᚋengajerestᚋsparkleᚋgraphᚋmodelᚐUsersdata(ctx context.Context, sel ast.SelectionSet, v *model.Usersdata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._usersdata(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
