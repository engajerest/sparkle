# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Category {
 Categoryid: Int!
 Name: String!
 Type: Int!
 SortOrder: Int!
 Status:String!
}
type SubCategory{
 CategoryId: Int!
 SubCategoryId: Int!
 Name: String!
 Type: Int!
 SortOrder: Int!
 Status:String!
 Icon:String!

}
type Module{
 ModuleId:Int!
 CategoryId: Int!
 Name: String!
 Content: String!
 ImageUrl: String!
 LogoUrl: String!
}
type Sparkle{
 category:[Category]!
 subcategory:[SubCategory]!
 package:[Package]!

}
type Package{
 ModuleId:Int! 
 Modulename:String!
 Name: String!
 PackageId:Int!
 Status:String!
 PackageAmount:String!
 PaymentMode:String! 
 PackageContent:String!
 PackageIcon: String!
 Promocodeid:Int!
 Promonname:String!
 Promodescription:String!
 Promotype:String!
 Promovalue:Float!
 Packageexpiry:Int!
 Validitydate:String!
 Validity:Boolean!


}
input TenantDetails{
 Name:String!
 Regno:String!
 Email:String!
 Mobile:String!
 CategoryId: Int!
 SubCategoryId: Int!
 Subcategoryname:String!
 Type: Int!
 Tenanttoken:String!
}
input TenantAddress{
 Address:String!
 Suburb:String!
 State:String!
 Zip:String!
 Countrycode:String!
 Latitude:String!
 Longitude:String!
 TimeZone:String!
 Opentime:String!
 Closetime:String!
}
type TenantData{
 TenantId:Int!
 TenantName:String!
 Moduleid:Int! 
 Modulename:String!
 Subscriptionid:Int!
 Locationid:Int!
 Locationname:String!
}
type subscribedData{
 status:Boolean!
 code:Int!
 message:String!
 info:[TenantData]!
}
type subscribedDataResponse{
 status:Boolean!
 code:Int!
 message:String!
 info:TenantData
}
input subscription{
 TransactionDate:String!
 PackageId:Int!
 ModuleId:Int!
 CurrencyId:Int!
 CurrencyCode:String!
 Price:String!
 TaxId:Int!
 Quantity:Int!
 Promoid:Int!
 Promovalue:String!
 TaxAmount:String!
 TotalAmount:String!
 PaymentStatus:Int!
 PaymentId:Int
 Validitydate:String!
}

input initialsubscribe{
TransactionDate:String!
 Packageid:Int!
 Partnerid:Int!
 Moduleid:Int!
 Currencyid:Int!
 CurrencyCode:String!
 Price:String!
 TaxId:Int!
 Quantity:Int!
 Promoid:Int!
 Promovalue:String!
 TaxAmount:String!
 TotalAmount:String!
 PaymentStatus:Int!
 Paymentid:Int
 Validitydate:String!
}
input subscriptionnew{
   Tenantid:Int!
TransactionDate:String!
 Packageid:Int!
 Partnerid:Int!
 Moduleid:Int!
  CategoryId: Int!
 SubCategoryId: Int!
 Subcategoryname:String!
 Currencyid:Int!
 CurrencyCode:String!
 Price:String!
 TaxId:Int!
 Quantity:Int!
 Promoid:Int!
 Promovalue:String!
 TaxAmount:String!
 TotalAmount:String!
 PaymentStatus:Int!
 Paymentid:Int
 Validitydate:String!
}

input tenantuser{
 TenantId:Int!
 firstname: String!
 lastname:String!
 password: String!
 mobile:String!
 email:String!
 locationid:Int!
 roleid:Int!
}
input data{
 tenantinfo:TenantDetails
 tenantlocation:TenantAddress
 subscriptiondetails:[initialsubscribe]
}
input location{
 TenantId:Int!
 LocationName:String!
 Email:String!
 Contact:String!
 Address:String!
 Suburb:String!
 State:String!
 Zip:String!
 Countrycode:String!
 Latitude:String!
 Longitude:String!
 Openingtime:String!
 Closingtime:String!
 Delivery:Boolean!
 Deliverytype:String!
 Deliverymins:Int!

}
input locationupdate{
Locationid:Int!
 TenantId:Int!
 LocationName:String!
 Email:String!
 Contact:String!
 Address:String!
 Suburb:String!
 State:String!
 Zip:String!
 Countrycode:String!
 Latitude:String!
 Longitude:String!
 Openingtime:String!
 Closingtime:String!
 Delivery:Boolean!
 Deliverytype:String!
 Deliverymins:Int!

}
input chargecreate{
deliverycharges:[deliverychargeinput]
othercharges:[chargecreateinput]

}
input chargecreateinput{
Tenantid:Int!
Locationid:Int!
Chargeid:Int!
Chargename:String!
Chargetype:String!
Chargevalue:String!
}
input chargeupdateinput{
Tenantchargeid:Int!
Tenantid:Int!
Locationid:Int!
Chargeid:Int!
Chargename:String!
Chargetype:String!
Chargevalue:String!
}
input deliverychargeinput{
Tenantid:Int!
Locationid:Int!  
Slabtype:String!
Slab:String!
Slablimit:Int!
Slabcharge:String!
}
input updatedeliverychargeinput{
Settingsid:Int!
Tenantid:Int!
Locationid:Int!  
Slabtype:String!
Slab:String!
Slablimit:Int!
Slabcharge:String!
}
input chargeupdate{
updatedeliverycharges:updatedelivery
updateothercharges:updateother
}
input updatedelivery{
   create:[deliverychargeinput]
   update:[updatedeliverychargeinput]
   delete:[Int]
}
input updateother{
create:[chargecreateinput]
update:[chargeupdateinput]
delete:[Int]
}
input locationstatusinput{
 
  locationstatus:[locstatus]
  deliverystatus:[delstatus]
}
input locstatus{
 tenantid:Int!
 locationid:Int!
 status:String!
}
input delstatus{
 tenantid:Int!
 locationid:Int!
 delivery:Boolean!
}
input subcatinsertdata{
Tenantid:Int! 
Moduleid:Int!
Categoryid:Int!
Subcategoryid:Int! 
Subcategoryname:String! 
}
input updateinfo{
Tenantid:Int!
Locationid:Int!
 Brandname:String!
 About:String!
 Tenantimage:String!
 Openingtime:String!
 Closingtime:String!

}
type LocationInfo{
 Locationid:Int!
 LocationName:String!
 status:String!
 createdby:Int!
}
type locationdata{
 status:Boolean!
 code:Int!
 message:String!
 locationinfo:LocationInfo!
}
type locationgetall {
 locationid:Int!
 locationName:String!
 tenantid:Int!
 email:String!
 contact:String!
 address:String!
 suburb:String!
 state:String!
 postcode:String!
 countycode:String!
 latitude:String!
 longitude:String!
 openingtime:String!
 closingtime:String!
 delivery:Boolean!
 deliverytype:String!
 deliverymins:Int!
 status:String!
 createdby:Int!
 tenantusers:[usertenant]
 othercharges:[othercharge]
 deliverycharges:[deliverycharge]
}
type othercharge{
Tenantchargeid:Int!
Tenantid:Int!
Locationid:Int!
Chargeid:Int!
Chargename:String!
Chargetype:String!
Chargevalue:String!
}
type deliverycharge{
   Settingsid:Int!
Tenantid:Int!
Locationid:Int!  
Slabtype:String!
Slab:String!
Slablimit:Int!
Slabcharge:String!
}
type usertenant{
 userid:Int!
 firstname: String!
 lastname:String!
 mobile:String!
 email:String!
 Userlocationid:Int!
}
type getalllocations{
 status:Boolean!
 code:Int!
 message:String!
 locations:[locationgetall]
}
type user{
 userid:Int!
}
type tenantuserdata{
 status:Boolean!
 code:Int!
 message:String!
 tenantuser:user!
}
type usersdata{
 status:Boolean!
 code:Int!
 message:String!
 users:[userfromtenant]
}
type userfromtenant{
 userId: Int! 
 locationid:Int!
 locationName:String!
 tenantid:Int!
 firstname: String!
 lastname:String!
 mobile:String!
 email:String!
 created:String!
 status:String!
}
input updatetenant{
 userid: Int! 
 tenantid:Int!
 firstname: String!
 lastname:String!
 mobile:String!
 email:String!
 locationid:Int!
}
type tenantupdatedata{
 status:Boolean!
 code:Int!
 message:String!
 updated:Int!
}
input businessupdatedata{
 tenantid:Int!
 brandname:String
 about:String
 cod:Int
 digital:Int

 tenantimage:String!
}
input socialupdatedata{
socialid:Int
 socialprofile:String
 sociallink:String
 socialicon:String
}
input socialadddata{

 socialprofile:String
 sociallink:String
 socialicon:String
}
input business{
 businessupdate:businessupdatedata
 socialadd:[socialadddata]
 socialupdate:[socialupdatedata]
 socialdelete:[Int]
}
type businessdata{
 status:Boolean!
 code:Int!
 message:String!
 updated:Int!
}
type getBusinessdata{
 status:Boolean!
 code:Int!
 message:String!
 businessinfo:info
}
type info{
 tenantid:Int!
 moduleid:Int!
 modulename:String!
 brandname:String
 about:String
 email:String
 phone:String
 address:String
 cod:Int
 digital:Int
 tenantaccid:String
 tenanttoken:String
 tenantimage:String
 social:[socialinfo]
}
type socialinfo{
socialid:Int!
 socialprofile:String!
 sociallink:String!
 socialicon:String!
}
type Promotion {
 Promotionid: Int!
 Promotiontypeid:Int!
 Promotionname: String!
 Tenantid:Int!
 Tenantame: String!
 Promocode:String!
 Promoterms:String!
 Promovalue:String!
 Promotag: String!
Promotype:String!
 Startdate:String!
 Enddate: String!
 Status:String
}

type getpromotiondata{
 status:Boolean!
 code:Int!
 message:String!   
 promotions:[Promotion]
}
type promotioncreateddata{
 status:Boolean!
 code:Int!
 message:String!     
}
input promoinput{
 Promotiontypeid:Int!
 Promotionname: String
 Tenantid:Int!  
 Promocode:String
 Promoterms:String
 Promovalue:String
 Startdate:String
 Enddate: String 
}
type promotypesdata{
 status:Boolean!
 code:Int!
 message:String! 
 types:[typedata]    
}
type typedata{
   Promotiontypeid:Int!  
   Typename:String
   Tag:String
}
type chargetypedata{
status:Boolean!
 code:Int!
 message:String! 
 types:[chargetype]
}
type chargetype{
 Chargeid:Int!
 Chargename:String!
 Status:String
}
type locationbyiddata{
status:Boolean!
 code:Int!
 message:String! 
 locationdata:locationgetall

}
type getpaymentdata{
status:Boolean!
code:Int!
message:String!   
payments:[paymentdata] 
}
type paymentdata{
Paymentid:Int!
Packageid:Int!
Tenantid:Int!
Packagename:String!
Paymenttypeid:Int!
Customerid:Int!
Transactiondate:String!
Orderid:Int
Chargeid:String!
Amount:Float!
Refundamt:Float
Paymentstatus:String
Created:String
 Firstname:String!
 Lastname:String!
Email:String!
Contact:String!
Paymentref:String!


}
type Custinfo{
   Customerid:Int!
   Firstname:String!
   Lastname:String!
   Email:String!
   Contact:String!
   Address:String!
}
type getsubscriptionsdata{
  status:Boolean!
code:Int!
message:String! 
subscribed:[subscriptionsdata]  
}
type subscriptionsdata{
Packageid:Int
Moduleid:Int
Tenantid:Int
Modulename:String
Packagename:String
LogoUrl:String
PackageIcon:String
PackageAmount:Float
TotalAmount:Float
Customercount:Int
Locationcount:Int
}
type getnonsubscribeddata{
status:Boolean!
code:Int!
message:String!  
 nonsubscribed:[Package]
}
type getallmoduledata{
 status:Boolean!
code:Int!
message:String! 
modules:[mod]  
}
type mod{
 Moduleid:Int!
	Categoryid:Int!
	Modulename:String!
	Content:String!
	Logourl:String!
	Iconurl:String!
}
type getallpromodata{
  status:Boolean!
code:Int!
message:String! 
promos:[promo]  
}
type promo{
Promocodeid:Int!
Moduleid:Int!
Partnerid:Int!
Packageid:Int!
Promoname:String!
Promodescription:String!
Packageexpiry:String!
Promotype:String!
Promovalue:String!
Validity:String!
Validitystatus:Boolean!
}
type Query {
 sparkle: Sparkle!
 location(tenantid:Int!):getalllocations
 tenantusers(tenantid:Int!):usersdata!
 getBusiness(tenantid:Int!,categoryid:Int!):getBusinessdata
 getpromotions(tenantid:Int!):getpromotiondata
 getpromotypes:promotypesdata
 getchargetypes:chargetypedata
 getlocationbyid(tenantid:Int!,locationid:Int!):locationbyiddata
 getpayments(tenantid:Int!,typeid:Int!):getpaymentdata
 getsubscriptions(tenantid:Int!):getsubscriptionsdata
 getnonsubscribed(tenantid:Int!):getnonsubscribeddata
 getallmodule(categoryid:Int!):getallmoduledata
 getallpromos(moduleid:Int!):getallpromodata

}

type Mutation {
 subscribe(input: data!): subscribedData
 createtenantuser(create:tenantuser):tenantuserdata
 updatetenantuser(update:updatetenant):tenantupdatedata
 updatetenantbusiness(businessinfo:business):businessdata
 createlocation(input:location):locationdata
 createpromotion(input:promoinput):promotioncreateddata
 createcharges(input:chargecreate):promotioncreateddata
 updatecharges(input:chargeupdate):promotioncreateddata
 updatelocationstatus(input:locationstatusinput):promotioncreateddata
 updatelocation(input:locationupdate):promotioncreateddata
 subscription(input:[subscriptionnew]):subscribedData
 initialupdate(input:updateinfo):promotioncreateddata
 insertsubcategory(input:[subcatinsertdata]):promotioncreateddata
}